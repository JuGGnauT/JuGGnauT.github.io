<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>接口重试函数</title>
      <link href="/2022/12/05/%E6%8E%A5%E5%8F%A3%E9%87%8D%E8%AF%95%E5%87%BD%E6%95%B0/"/>
      <url>/2022/12/05/%E6%8E%A5%E5%8F%A3%E9%87%8D%E8%AF%95%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<pre><code class="js">//TODO: 1. 实现一个，有错误机制，重试机制，加载机制的请求函数//      2. 先做一个，仅跟接口请求有关的defineAsyncRequest(&#123;    // 加载Promise    loader: () =&gt; new Promise((resolve, reject) =&gt; &#123;        setTimeout(() =&gt; &#123;            Math.random() &gt; .9 ? resolve(&quot;请求成功！&quot;) : reject(&quot;请求失败！&quot;)        &#125;, 3000)    &#125;),    // 加载延时    delay: 1000,    // 加载中状态变更回调    onLoading: (state) =&gt; &#123;        console.log(state ? &#39;加载中。。&#39; : &#39;加载完毕&#39;)    &#125;,    // 出错回调，可以重试    onError: (retry, fail, retries) =&gt; &#123;        console.log(retries)        if (retries &gt; 3) &#123;            console.log(&#39;失败超过三次，直接当作失败&#39;)            fail()        &#125; else &#123;            retry()        &#125;    &#125;&#125;)    .then(res =&gt; &#123;        console.log(`成功 res:$&#123;res&#125;`)    &#125;)    .catch((err) =&gt; &#123;        console.log(&#39;err=&gt;&#39;, err)    &#125;)function defineAsyncRequest(options) &#123;    console.time(&quot;开始执行 defineAsyncRequest&quot;)    if (typeof options === &#39;function&#39;) &#123;        options = &#123;            loader: options        &#125;    &#125;    const &#123; loader &#125; = options    // 记录重试次数    let retries = 0    let loading = false    let loaded = false    function loadingCb(loading) &#123;        options.onLoading &amp;&amp; options.onLoading(loading)    &#125;    let loadingTimer = null    if (options.delay) &#123;        loadingTimer = setTimeout(() =&gt; &#123;            loading = true            loadingCb(loading)        &#125;, options.delay);    &#125; else &#123;        loading = true        loadingCb(loading)    &#125;    function load() &#123;        return loader()            .catch((err) =&gt; &#123;                if (options.onError) &#123;                    return new Promise((resolve, reject) =&gt; &#123;                        // 重试                        const retry = () =&gt; &#123;                            console.log(&quot;请求重试----&quot;)                            resolve(load())                            retries++                        &#125;                        const fail = () =&gt; reject(err)                        options.onError(retry, fail, retries)                    &#125;)                &#125; else &#123;                    throw err;                &#125;            &#125;)    &#125;    return load()        .then(c =&gt; &#123;            loaded = true            return c        &#125;)        .finally(() =&gt; &#123;            loading = false            loadingCb(loading)            clearTimeout(loadingTimer)        &#125;)&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS选择器优先级</title>
      <link href="/2022/12/02/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E4%BC%98%E5%85%88%E7%BA%A7/"/>
      <url>/2022/12/02/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E4%BC%98%E5%85%88%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><blockquote><p>口诀：0符 1标 2类 3ID 4内联 5important</p></blockquote><p>（1）0级：<code>通配选择器、选择符和逻辑组合伪类</code>。其中，通配选择器写作星号（*）。示例如下：</p><pre><code class="css">* &#123; color: #000; &#125;</code></pre><p>选择符指+、&gt;、~、空格和||。</p><p>逻辑组合伪类有:not()、:is()和:where等，这些伪类本身并不影响CSS优先级，影响优先级的是括号里面的选择器。</p><pre><code class="css">:not() &#123;&#125;</code></pre><p>（2）1级：标签选择器。示例如下：</p><pre><code class="css">body &#123; color: #333; &#125;</code></pre><p>（3）2级：类选择器、属性选择器和伪类。示例如下：</p><pre><code class="css">.foo &#123; color: #666; &#125;[foo] &#123; color: #666; &#125;:hover &#123; color: #333; &#125;</code></pre><p>（4）3级：ID选择器。示例如下：</p><pre><code class="css">#foo &#123; color: #999; &#125;</code></pre><p>（5）4级：style属性内联。示例如下：</p><pre><code class="css">&lt;span style=&quot;color: #ccc;&quot;&gt;优先级&lt;/span&gt;</code></pre><p>（6）5级：!important。示例如下：</p><pre><code class="css">.foo &#123; color: #fff !important; &#125;</code></pre><h2 id="计算规则"><a href="#计算规则" class="headerlink" title="计算规则"></a>计算规则</h2><blockquote><p>出现一个0级选择器，优先级数值+0；出现一个1级选择器，优先级数值+1；出现一个2级选择器，优先级数值+10；出现一个3级选择器，优先级数值+100。</p></blockquote><p><a href=""><img src="/2022/12/02/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E4%BC%98%E5%85%88%E7%BA%A7/youxianji.png" alt="img"></a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack5配置模板</title>
      <link href="/2022/11/25/webpack5%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/11/25/webpack5%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><pre><code class="json">// package.json&#123;  &quot;name&quot;: &quot;project&quot;,  &quot;version&quot;: &quot;1.0.0&quot;,  &quot;description&quot;: &quot;&quot;,  &quot;main&quot;: &quot;index.js&quot;,  &quot;scripts&quot;: &#123;    &quot;dev&quot;: &quot;cross-env NODE_ENV=dev webpack serve --mode development&quot;,    &quot;test&quot;: &quot;cross-env NODE_ENV=test webpack --mode production&quot;,    &quot;build&quot;: &quot;cross-env NODE_ENV=prod webpack --mode production&quot;,    &quot;analyzer&quot;: &quot;cross-env NODE_ENV=prod webpack --progress --mode production&quot;  &#125;,  &quot;author&quot;: &quot;&quot;,  &quot;license&quot;: &quot;ISC&quot;,  &quot;devDependencies&quot;: &#123;    &quot;webpack&quot;: &quot;^5.69.1&quot;,    &quot;webpack-cli&quot;: &quot;^4.9.2&quot;,    &quot;@babel/cli&quot;: &quot;^7.17.3&quot;,    &quot;@babel/core&quot;: &quot;^7.17.4&quot;,    &quot;@babel/plugin-transform-runtime&quot;: &quot;^7.17.0&quot;,    &quot;@babel/preset-env&quot;: &quot;^7.16.11&quot;,    &quot;@babel/runtime-corejs3&quot;: &quot;^7.17.2&quot;,    &quot;babel-loader&quot;: &quot;^8.2.3&quot;,    &quot;cache-loader&quot;: &quot;^4.1.0&quot;,    &quot;clean-webpack-plugin&quot;: &quot;^4.0.0&quot;,    &quot;copy-webpack-plugin&quot;: &quot;^10.2.4&quot;,    &quot;core-js&quot;: &quot;^3.21.0&quot;,    &quot;cross-env&quot;: &quot;^7.0.3&quot;,    &quot;css-loader&quot;: &quot;^6.6.0&quot;,    &quot;file-loader&quot;: &quot;^6.2.0&quot;,    &quot;glob&quot;: &quot;^7.2.0&quot;,    &quot;html-webpack-plugin&quot;: &quot;^5.5.0&quot;,    &quot;img-loader&quot;: &quot;^4.0.0&quot;,    &quot;mini-css-extract-plugin&quot;: &quot;^2.5.3&quot;,    &quot;node-sass&quot;: &quot;^7.0.1&quot;,    &quot;optimize-css-assets-webpack-plugin&quot;: &quot;^6.0.1&quot;,    &quot;postcss&quot;: &quot;^8.4.6&quot;,    &quot;postcss-loader&quot;: &quot;^6.2.1&quot;,    &quot;postcss-preset-env&quot;: &quot;^7.3.3&quot;,    &quot;purgecss-webpack-plugin&quot;: &quot;^4.1.3&quot;,    &quot;sass-loader&quot;: &quot;^12.6.0&quot;,    &quot;speed-measure-webpack-plugin&quot;: &quot;^1.5.0&quot;,    &quot;style-loader&quot;: &quot;^3.3.1&quot;,    &quot;url-loader&quot;: &quot;^4.1.1&quot;,    &quot;webpack-bundle-analyzer&quot;: &quot;^4.5.0&quot;,    &quot;webpack-dev-server&quot;: &quot;^3.11.2&quot;  &#125;&#125;</code></pre><h2 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h2><pre><code class="js">// webpack.config.jsconst path = require(&#39;path&#39;);// 生成html文件const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);// 清空output文件夹const &#123; CleanWebpackPlugin &#125; = require(&#39;clean-webpack-plugin&#39;);// 复制文件夹const CopyWebpackPlugin = require(&#39;copy-webpack-plugin&#39;);// 抽出CSS文件const MiniCssExtractPlugin = require(&#39;mini-css-extract-plugin&#39;);// 费时分析 webpack 5X 别用const SpeedMeasurePlugin = require(&#39;speed-measure-webpack-plugin&#39;);// 可以直观的看到打包结果中，文件的体积大小、各模块依赖关系、文件是够重复等问题，极大的方便我们在进行项目优化的时候，进行问题诊断。const BundleAnalyzerPlugin =  require(&#39;webpack-bundle-analyzer&#39;).BundleAnalyzerPlugin;// 可以忽略模块的部分文件const IgnorePlugin = require(&#39;webpack&#39;).IgnorePlugin;// 压缩cssconst OptimizeCssAssetsPlugin = require(&#39;optimize-css-assets-webpack-plugin&#39;);// 压缩JS 自带const TerserPlugin = require(&#39;terser-webpack-plugin&#39;);// 清除无用CSSconst PurgecssWebpackPlugin = require(&#39;purgecss-webpack-plugin&#39;);const glob = require(&#39;glob&#39;); // 文件匹配模式 读取文件夹下文件名const smp = new SpeedMeasurePlugin();console.log(&#39;process.env.NODE_ENV=&#39;, process.env.NODE_ENV); // 打印环境变量function resolve(dir) &#123;  return path.resolve(__dirname, dir);&#125;const PATHS = &#123;  src: resolve(&#39;src&#39;),&#125;;const config = &#123;  //   mode: &#39;development&#39;,  entry: &#39;./src/index.js&#39;, // 打包入口地址  output: &#123;    filename: &#39;bundle.js&#39;, // 输出文件名    path: path.join(__dirname, &#39;dist&#39;), // 输出文件目录  &#125;,  cache: &#123;    type: &#39;filesystem&#39;,  &#125;,  //压缩  optimization: &#123;    minimize: true,    minimizer: [      // 添加 css 压缩配置      new OptimizeCssAssetsPlugin(&#123;&#125;),      // 添加 JS 压缩配置      new TerserPlugin(&#123;&#125;),    ],  &#125;,  // source-map  devtool: &#39;source-map&#39;,  resolve: &#123;    // 配置别名    alias: &#123;      // 使用 src 别名 ~      // import &#39;~/fonts/iconfont.css&#39;      &#39;~&#39;: resolve(&#39;src&#39;),      &#39;@&#39;: resolve(&#39;src&#39;),    &#125;,    // 导入不用扩展名，会在这搜，常用放最前    // import file from &#39;../path/to/file&#39;;    // 如果想留默认配置，用扩展运算符 extensions: [&#39;.ts&#39;, &#39;...&#39;],    extensions: [&#39;.js&#39;, &#39;.json&#39;, &#39;.wasm&#39;],  &#125;,  // 配置外部导入JS 如jQuery  externals: &#123;    // 别的JS通过 import $ from &#39;jquery&#39;; 使用    // jquery: &#39;jQuery&#39;,  &#125;,  module: &#123;    // 不匹配大型库，加快速度！    // 使用 noParse 进行忽略的模块文件中不会解析 import、require 等语法    noParse: /jquery|lodash/,    rules: [      // 转换规则      &#123;        test: /\.(woff2?|eot|ttf|otf)(\?.*)?$/i,        type: &#39;asset&#39;,        generator: &#123;          // 输出文件位置以及文件名          filename: &#39;[name][hash:8][ext]&#39;,        &#125;,        parser: &#123;          dataUrlCondition: &#123;            maxSize: 10 * 1024, // 超过100kb不转 base64          &#125;,        &#125;,      &#125;,      &#123;        test: /\.(jpe?g|png|gif)$/i,        type: &#39;asset&#39;,        generator: &#123;          // 输出文件位置以及文件名          // [ext] 自带 &quot;.&quot; 这个与 url-loader 配置不同          filename: &#39;[name][hash:8][ext]&#39;,        &#125;,        parser: &#123;          dataUrlCondition: &#123;            maxSize: 50 * 1024, //超过50kb不转 base64          &#125;,        &#125;,      &#125;,      &#123;        test: /\.(s[ac]|c)ss$/, //匹配所有的 css 文件        // use: 对应的 Loader 名称        // 有顺序，必须style-loader在前！        // 添加 loader        use: [          //   &#39;style-loader&#39;, 生成&lt;style&gt;标签的          MiniCssExtractPlugin.loader,          &#39;cache-loader&#39;, // 缓存！ 获取前面 loader 转换的结果          &#39;css-loader&#39;,          &#39;postcss-loader&#39;,          &#39;sass-loader&#39;,        ],      &#125;,      &#123;        test: /\.js$/,        exclude: /node_modules/,        use: &#123;          loader: &#39;babel-loader&#39;,          options: &#123;            cacheDirectory: true, // 启用缓存            presets: [              [                &#39;@babel/preset-env&#39;,                &#123;                  useBuiltIns: &#39;usage&#39;,                  corejs: 3, // 是 core-js 版本号                &#125;,              ],            ],            plugins: [              [                &#39;@babel/plugin-transform-runtime&#39;,                &#123;                  corejs: 3,                &#125;,              ],            ],          &#125;,        &#125;,      &#125;,    ],  &#125;,  // ...  devServer: &#123;    // 静态文件目录 如果不使用CopyWebpackPlugin,    // 就可以设置此属性，指定静态文件目录！    contentBase: path.resolve(__dirname, &#39;.&#39;),    compress: true, //是否启动压缩 gzip    port: 8080, // 端口号    // open:true  // 是否自动打开浏览器  &#125;,  plugins: [    // 清除无用CSS    new PurgecssWebpackPlugin(&#123;      paths: glob.sync(`$&#123;PATHS.src&#125;/**/*`, &#123; nodir: true &#125;),    &#125;),    // 生成文件大小等分析    new BundleAnalyzerPlugin(&#123;      // analyzerMode: &#39;disabled&#39;,  // 不启动展示打包报告的http服务器      // generateStatsFile: true, // 是否生成stats.json文件    &#125;),    // 忽略文件插件 用moment库做例子，把语言去掉    // - requestRegExp 匹配(test)资源请求路径的正则表达式。    // - contextRegExp 匹配(test)资源上下文（目录）的正则表达式。    new IgnorePlugin(&#123;      resourceRegExp: /^\.\/locale$/,      contextRegExp: /moment$/,    &#125;),    // 配置HTML模板插件    new HtmlWebpackPlugin(&#123;      template: &#39;./template/index.html&#39;,    &#125;),    new CleanWebpackPlugin(), // 清空输出目录目录插件    new MiniCssExtractPlugin(&#123;      // 添加插件      filename: &#39;[name].[hash:8].css&#39;,    &#125;),    // 复制插件 使用contentbase就没必要开了    // new CopyWebpackPlugin(&#123;    //   patterns: [    //     &#123;    //       from: path.resolve(__dirname, &#39;./static&#39;),    //       to: &#39;./static&#39;,    //     &#125;,    //   ],    // &#125;),  ],&#125;;module.exports = (env, argv) =&gt; &#123;  console.log(&#39;argv.mode=&#39;, argv.mode); // 打印 mode(模式) 值  // 这里可以通过不同的模式修改 config 配置  return config;&#125;;</code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html如何显示未转义文本</title>
      <link href="/2022/11/25/html%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BA%E6%9C%AA%E8%BD%AC%E4%B9%89%E6%96%87%E6%9C%AC/"/>
      <url>/2022/11/25/html%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BA%E6%9C%AA%E8%BD%AC%E4%B9%89%E6%96%87%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="xmp-标签"><a href="#xmp-标签" class="headerlink" title="xmp 标签"></a>xmp 标签</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/xmp">mdn文档导航</a></p><p><code>&lt;xmp&gt;</code> 标签之间的内容不会被当作文档内容解析，而会被用等宽字体直接呈现。HTML2 规范建议，本标签中的内容应该具有足够容纳每行 80 个字母的宽度。</p><blockquote><p>备注<br>建议您使用<code>&lt;pre&gt;</code> 元素，如果有特殊需求，您可以使用 <code>&lt;code&gt;</code> 元素。需要您注意的是，使用元素的时候，需要将内容中的<code>&quot;&lt;&quot;转义为&quot;&amp;lt;&quot;</code>，以防止被浏览器当作正常标签解析。<br>通过 CSS 样式表将 font-family 属性的值设置成为 generic-font，可以让任何其他任何标签获得等宽字体的样式。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理配置</title>
      <link href="/2022/11/23/%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/11/23/%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="Git-代理配置"><a href="#Git-代理配置" class="headerlink" title="Git 代理配置"></a>Git 代理配置</h2><p><code>使用命令直接设定socks或者http代理即可。</code></p><p><em>带参数是临时的，修改配置文件是永久变更，修改后最好重启git 设置生效。</em></p><p>socks代理：</p><pre><code class="bash"># socksgit config --global http.proxy &#39;socks5://127.0.0.1:10809&#39;git config --global https.proxy &#39;socks5://127.0.0.1:10809&#39;# http/https代理git config --global http.proxy http://127.0.0.1:10809git config --global https.proxy https://127.0.0.1:10809# 取消设置git config --global --unset http.proxygit config --global --unset https.proxy# 查看配置信息：git config -l --global# 执行查看代理git config -l</code></pre><h1 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h1><h2 id="npm-设置代理"><a href="#npm-设置代理" class="headerlink" title="npm 设置代理"></a>npm 设置代理</h2><pre><code class="bash"># 无需账户密码npm config set proxy http://127.0.0.1:10809npm config set https-proxy http://127.0.0.1:10809# 需要账户密码npm config set proxy http://username:password@server:portnpm config set https-proxy http://username:pawword@server:port# 查看config配置npm config list# 清除npm的代理npm config delete proxynpm config delete https-proxy</code></pre><h2 id="npm-设置镜像源"><a href="#npm-设置镜像源" class="headerlink" title="npm 设置镜像源"></a>npm 设置镜像源</h2><pre><code class="bash"># 查看当前的镜像源npm config get registry# 修改当前的镜像源为淘宝镜像源npm config set registry https://registry.npm.taobao.org# 清除npm的镜像源npm config delete registry</code></pre>]]></content>
      
      
      <categories>
          
          <category> 通用 </category>
          
          <category> git </category>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS变量</title>
      <link href="/2022/11/22/CSS%E5%8F%98%E9%87%8F/"/>
      <url>/2022/11/22/CSS%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-变量"><a href="#CSS-变量" class="headerlink" title="CSS 变量"></a>CSS 变量</h1><p>原文档：<a href="https://juejin.cn/post/7022931578397392933">https://juejin.cn/post/7022931578397392933</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>sass&#x2F;less&#x2F;stylus，让我们的 CSS 代码保持良好的结构和可维护性。</p><p>近年来，一些动态特性开始作为规范的一部分，出现在 CSS 语言中。我们称之为 CSS 变量(CSS custom property)。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>使用之前我们先看看其兼容性：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9895d872ef1445d2801b14a60c1db3b2~tplv-k3u1fbpfcp-watermark.awebp" alt="WeChate8da62b6920d1162711e88f0b5f7b6c4.png"></p><blockquote><p>🙀 哇哦，已经兼容 95%左右的用户了，看来我们几乎可以肆无忌惮的使用了，好了，接下来就让我们一起去了解一下它吧。</p></blockquote><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="Css-中使用"><a href="#Css-中使用" class="headerlink" title="Css 中使用"></a>Css 中使用</h3><p>在自定义属性前添加双横线前缀，然后像给普通 CSS 设值一样，给自定义属性设值。</p><pre><code class="css">--primary-color: #000;</code></pre><p><em>在上面的代码中，我们给一个叫做<code>--primary-color</code>的自定义属性设置了一个颜色值<code>#000</code>。</em></p><p>属性已经定义好了，那么我们现在就去尝试使用，像这样：</p><pre><code class="css">color: var(--primary-color);</code></pre><p>全局 CSS 变量</p><pre><code class="css">:root &#123;  --primary-color: #000;&#125;</code></pre><p>完整的使用方法如下：</p><pre><code class="css">:root &#123;  --primary-color: #000;&#125;/* CSS文件的其他部分 */#div &#123;  background-color: var(--primary-color);&#125;</code></pre><p>最后，你可以在 CSS 变量中加入一个或多个<strong>备用值</strong>:</p><pre><code class="css">/*var(变量, 默认值: 当不存在变量时，默认值生效)*/var(--primary-color, #111);</code></pre><h3 id="值的计算（-calc-）"><a href="#值的计算（-calc-）" class="headerlink" title="值的计算（ calc() ）"></a>值的计算（ calc() ）</h3><pre><code class="css">:root &#123;  --base-height: 10px;&#125;margin: 0 0 calc(var(--base-height, 10px) * 1rem);</code></pre><p>*注意：</p><ul><li>在一些浏览器中，针对 CSS 变量的复杂 calc()可能不能工作。</li><li>不能使用 CSS 自定义属性作为 CSS 属性名称：<code>var(--name): 10px;</code></li><li>不能作为媒体查询值使用：<code>@media screen and (min-width: var(--media-min-width)&#123;</code></li><li>不能作为图片地址使用：<code>url(var(--image-src))</code></li><li>calc 中的公式变量必须加空格，不然不生效</li></ul><h3 id="我们可以随时重置-x2F-继承变量的值"><a href="#我们可以随时重置-x2F-继承变量的值" class="headerlink" title="我们可以随时重置&#x2F;继承变量的值"></a>我们可以随时重置&#x2F;继承变量的值</h3><p>CSS 中自定义属性默认是继承的，通过这个例子，可以消除模块&#x2F;组件受到的影响</p><pre><code class="css">:root &#123;  --bgcolor: #000;  --color: #111;&#125;.reset &#123;  --bgcolor: #222;  --color: #333;  background: var(--bgcolor);  color: var(--color);&#125;</code></pre><h3 id="JavaScript-中操作-CSS-变量"><a href="#JavaScript-中操作-CSS-变量" class="headerlink" title="JavaScript 中操作 CSS 变量"></a>JavaScript 中操作 CSS 变量</h3><p>假如在你的 CSS 文件中，有一个叫做<code>--color</code>的变量，作用在<code>.div</code>选择器中，值为<code>#000</code>：</p><pre><code class="js">.div &#123;    --default-color: #fff;    --color: #000;&#125;// READconst rootStyles = getComputedStyle(document.documentElement)const varValue = rootStyles.getPropertyValue(&#39;--color&#39;).trim()// WRITEdocument.documentElement.style.setProperty(&#39;--color&#39;, &#39;#111&#39;)</code></pre><p>下面大家一起来看看使用时的例子：</p><pre><code class="js">// GETalert( getComputedStyle(document.documentElement).getPropertyValue(&#39;--screen-category&#39;).trim(); );// SETdocument.documentElement.style.setProperty(&#39;--color&#39;, &#39;#222&#39;)// 或者设置其他的变量以及默认值document.documentElement.style.setProperty( &#39;--color&#39;, &#39;var(--default-color, #333)&#39; )</code></pre><h3 id="检测浏览器是否支持-CSS-自定义属性的方法："><a href="#检测浏览器是否支持-CSS-自定义属性的方法：" class="headerlink" title="检测浏览器是否支持 CSS 自定义属性的方法："></a>检测浏览器是否支持 CSS 自定义属性的方法：</h3><p>CSS:</p><pre><code class="css">@supports ((--height: 0)) &#123;  /* 支持的css可以写这里 */&#125;@supports (not (--height: 0)) &#123;  /* 不支持的css可以写这里 */&#125;</code></pre><p>JS:</p><pre><code class="js">if (window.CSS &amp;&amp; window.CSS.supports &amp;&amp; window.CSS.supports(&quot;--height&quot;, 0)) &#123;  alert(&quot;支持&quot;);&#125; else &#123;  alert(&quot;不支持&quot;);&#125;</code></pre><h1 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h1><h2 id="pointer-events"><a href="#pointer-events" class="headerlink" title="pointer-events"></a>pointer-events</h2><blockquote><p>兼容 IE11</p></blockquote><p>事件穿透 CSS 属性。</p><h2 id="CSS-hsl-函数"><a href="#CSS-hsl-函数" class="headerlink" title="CSS hsl() 函数"></a>CSS hsl() 函数</h2><h3 id="定义与用法"><a href="#定义与用法" class="headerlink" title="定义与用法"></a>定义与用法</h3><p>hsl() 函数使用色相、饱和度、亮度来定义颜色。</p><p>HSL 即色相、饱和度、亮度（英语：Hue, Saturation, Lightness）。</p><ul><li><strong>色相（H）</strong>是色彩的基本属性，就是平常所说的颜色名称，如红色、黄色等。</li><li><strong>饱和度（S）</strong>是指色彩的纯度，越高色彩越纯，低则逐渐变灰，取 0-100% 的数值。</li><li><strong>亮度（L）</strong>，取 0-100%，增加亮度，颜色会向白色变化；减少亮度，颜色会向黑色变化。</li></ul><p>HSL 是一种将 RGB 色彩模型中的点在圆柱坐标系中的表示法。这两种表示法试图做到比基于笛卡尔坐标系的几何结构 RGB 更加直观。</p><p>支持版本：CSS3</p><pre><code class="css">#p1 &#123;  background-color: hsl(120, 100%, 50%);&#125; /* 绿色 */#p2 &#123;  background-color: hsl(120, 100%, 75%);&#125; /* 浅绿  */#p3 &#123;  background-color: hsl(120, 100%, 25%);&#125; /* 暗绿  */#p4 &#123;  background-color: hsl(120, 60%, 70%);&#125; /* 柔和的绿色 */</code></pre><h3 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h3><p>表格中的数字表示支持该函数的第一个浏览器版本号。</p><table><thead><tr><th align="left">函数</th><th>google</th><th>egde</th><th>firefox</th><th>safari</th><th>opp</th></tr></thead><tbody><tr><td align="left">hsl()</td><td>1.0</td><td>9.0</td><td>1.0</td><td>3.1</td><td>9.5</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML标签</title>
      <link href="/2022/11/22/HTML%E6%A0%87%E7%AD%BE/"/>
      <url>/2022/11/22/HTML%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[  <head>  <!--       base标签        <base href="http://www.w3school.com.cn/i/" target="_blank" />        base标签定义了文档的基础url地址，在文档中所有的相对地址形式的url都是相对于这里定义的url而言的。为页面上的链接规定默认地址或目标。        1. href：            href是必选属性，指定了文档的基础url地址。            如果设置 https://www.abc.com            那么当文档中有超链接指向 /login.html 时，会跳转至 https://www.abc.com/login.html        <pre><code>    2. target: 跳转的方式        _blank ：新建选项卡打开，不影响原页面        _self：在当前窗口跳转，可返回        _parrent：在当前窗口跳转，可返回        _top：在当前窗口跳转，可返回</code></pre><p>–&gt;<br>  &lt;!–<br>    meta标签：<br>        作用：<br>            1. 对网页能否被搜索引擎检索，和在搜索中的排名起着关键性的作用<br>        自带属性<br>            1. name&#x3D;””<br>                - 可选，表示要设置的项<br>            2. http-equiv&#x3D;””：<br>                - 可选，表示要设置的项<br>                - http-equiv一般设置的都是与http请求头相关的信息，设置的值会关联到http头部。<br>                - 客户端请求服务器时，服务器会根据html中设置的meta放在响应头中返回给客户端。<br>                - 常见：content-type, expires, refresh, set-cookie, window-target, charset， pragma …</p><pre><code>            2.1 content-type                &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html charset=utf8&quot;&gt;                    可以用来声明文档的类型，设定字符集，目前content-type只能在html文档中使用                    设置后，浏览器头部信息就会包含：                        content-type: text/html charset=utf8                        2.2 expires                &lt;meta http-equiv=&quot;expires&quot; content=&quot;31 Dec 2021&quot;&gt;                    用于设置浏览器的过期时间, 其实就是响应头中的expires属性。                       2.3 refresh                &lt;meta http-equiv=&quot;refresh&quot; content=&quot;5 url=https://www.baidu.com&quot;&gt;                    该种设定表示5秒自动刷新并且跳转到指定的网页。如果不设置url的值那么浏览器则刷新本网页。            2.4 window-target                &lt;meta http-equiv=&quot;window-target&quot; content=&quot;_top&#39;&gt;                    强制页面在当前窗口以独立页面显示, 可以防止别人在框架中调用自己的页面。                        2.5 pragma                &lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;                    禁止浏览器从本地计算机的缓存中访问页面的内容            2.6 name 属性                name属性主要用于描述网页，与对应的content中的内容主要是便于搜索引擎查找信息和分类信息用的, 用法与http-equiv相同，name设置属性名，content设置属性值。                            2.7 author属性                &lt;meta name=&quot;author&quot; content=&quot;aaa@mail.abc.com&quot;&gt;                    author用来标注网页的作者            2.8 description                &lt;meta name=&quot;description&quot; content=&quot;这是我的HTML&quot;&gt;                    description用来告诉搜素引擎当前网页的主要内容，是关于网站的一段描述信息。            2.9 keywords                &lt;meta name=&quot;keywords&quot; content=&quot;Hello world&quot;&gt;                    keywords设置网页的关键字，来告诉浏览器关键字是什么。是一个经常被用到的名称。它为文档定义了一组关键字。某些搜索引擎在遇到这些关键字时，会用这些关键字对文档进行分类。                        2.10 generator                &lt;meta name=&quot;generator&quot; content=&quot;vscode&quot;&gt;                    表示当前html是用什么工具编写生成的，并没有实际作用，一般是编辑器自动创建的。            2.11 revised                &lt;meta name=&quot;revised&quot; content=&quot;V2，2015/10/1&quot;&gt;                    指定页面的最新版本                        2.12 robots                &lt;meta name=&quot;robots&quot; content=&quot;all&quot;&gt;                    告诉搜索引擎机器人抓取哪些页面，all / none / index / noindex / follow / nofollow。                        all：文件将被检索，且页面上的链接可以被查询                        none：文件将不被检索，且页面上的链接不可以被查询                        index：文件将被检索                        follow：页面上的链接可以被查询                        noindex：文件将不被检索，但页面上的链接可以被查询                        nofollow：文件将不被检索，页面上的链接可以被查询            2.13 scheme 属性                scheme 属性用于指定要用来翻译属性值的方案。此方案应该在由 head 标签的 profile 属性指定的概况文件中进行了定义。html5不支持该属性。                    3. content=&quot;&quot;            - 必须，表示需要设置的项的值</code></pre><p> –&gt;<br>  &lt;!–<br>    link 标签<br>        - type：定义包含的文档类型，例如text&#x2F;css<br>        - rel：定义html文档和所要包含资源之间的链接关系，可能的值有很多，最为常用的是stylesheet，用于包含一个固定首选样式的表单。<br>        - href: 表示指向被包含资源的url地址。<br>    script 标签<br>    <script src="script.js"></script><br>        - type： <script type="text/javascript"> 指示脚本的MIME类型。<br>        - async：异步执行脚本，仅适用于通过src引入的外部脚本。加载完后会立即执行，执行会暂停文档加载<br>        - defer：规定是否对脚本执行进行延迟，直到页面加载为止。同时加载，但得在文档加载完成后，DOMContentLoaded事件触发之前完成！<br>        - charset：规定在外部脚本文件中使用的字符编码。<br>            <script type="text/javascript" src="script.js" charset="UTF-8"></script><br>        - language：规定脚本语言，与&#96;&#96;type&#96;&#96;&#96;功能类似，不建议使用该字段。<br>        - src：外部脚本的地址<br>    bgsound 标签：网页背景音乐标签<br>            <bgsound src="music.mp4" autostart="true" loop="5"></p><p>–&gt;<br>  <!-- <meta http-equiv="refresh" content="5 url=https://www.baidu.com" /> --><br>  <meta http-equiv="content-type" content="text/html charset=GBK" /><br>  <meta http-equiv="expires" content="31 Dec 2021" /><br>  <meta charset="UTF-8" /><br>  <meta http-equiv="X-UA-Compatible" content="IE=edge" /><br>  <meta name="viewport" content="width=device-width, initial-scale=1.0" /><br>  <!-- 让https网站能访问http资源！ --><br>  <meta    http-equiv="Content-Security-Policy"    content="upgrade-insecure-requests"  /><br>  <!--         lang 属性        规定元素中内容的语言代码。     --><br>    <title>我是meta页面</title><br>  </head></p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS字体</title>
      <link href="/2022/11/22/CSS%E5%AD%97%E4%BD%93/"/>
      <url>/2022/11/22/CSS%E5%AD%97%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h1 id="使用字体"><a href="#使用字体" class="headerlink" title="使用字体"></a>使用字体</h1><pre><code class="css">@font-face &#123;    font-family: comforter;    /* src: url(&#39;./font/Comforter-Regular.ttf&#39;); */    /* woff2体积比ttf小！因此尽量使用woff2！可以使用node库 ttf2woff2 */    src: url(&#39;./font/Comforter-Regular.woff2&#39;);    &#125;.class&#123;     font-family: comforter;    /*  font-family: system-ui, -apple-system, BlinkMacSystemFont, segoe ui,        Roboto, Helvetica, Arial, sans-serif, apple color emoji,        segoe ui emoji, segoe ui symbol; */&#125;</code></pre><h1 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h1><h2 id="TTF文件过大怎么办！"><a href="#TTF文件过大怎么办！" class="headerlink" title="TTF文件过大怎么办！"></a>TTF文件过大怎么办！</h2><ol><li>先用ttf2woff2 转换成woff2格式！</li><li>如果只用其中某些字，用font-spider提取字符，最后得到TTF文件！再将TTF转为WOFF2!</li><li>使用 <a href="https://link.juejin.cn/?target=https://github.com/typekit/webfontloader">WebFontLoader</a> 统一渲染时机！</li></ol><h2 id="CSS字体文件预加载"><a href="#CSS字体文件预加载" class="headerlink" title="CSS字体文件预加载"></a>CSS字体文件预加载</h2><h3 id="webFontLoader"><a href="#webFontLoader" class="headerlink" title="webFontLoader"></a>webFontLoader</h3><p>假如这个 myfont.woff2 文件大小为 4M，而网络下载速度只有 1M&#x2F;s  ，则加载这个字体需要 4 秒钟。这4秒期间由于还没有加载完成远程字体，浏览器会使用什么字体渲染呢？事实上，不同的浏览器表现会不一样的，以下是一些常见的桌面浏览器的表现：</p><ul><li>IE：它会直接使用备用字体渲染，最后等webfont字体加载完毕后重新渲染。</li><li>Safari：它会一直等待webfont字体加载完毕，并且期间不会渲染字体。</li><li>Chrome &#x2F; Firefox：它们会等待webfont字体加载，如果在3秒之内没有加载完毕，则使用备用字体渲染。最后webfont加载完毕，使用并重新渲染。</li></ul><p>我们需要想办法统一这些行为，比较理想的行为是：先使用系统默认字体，等到远程字体加载完成了再替换成特殊字体。借助于 <a href="https://link.juejin.cn/?target=https://github.com/typekit/webfontloader">WebFontLoader</a> 可以很容易的实现这一效果。下面来看一下如何使用:</p><ol><li>在 css 中通过 @font-face 定义一个字体：</li></ol><pre><code class="css">@font-face &#123;  font-family: &#39;myfont&#39;;  src: url(&#39;./myfont.woff2&#39;) format(&#39;woff2&#39;);&#125;复制代码</code></pre><blockquote><p>注意，CSS 中只需要定义字体就行，而不要使用使用这个字休。</p></blockquote><ol><li>然后 引入 webfontloader  (也可以通过 npm 安装)，将你在 css 中定义的字体名称添加到 <code>custom.families</code> 列表中，并在 active 回调中将该字体添加到对应的元素上，代码如下：</li></ol><pre><code class="html">&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/webfont/1.6.26/webfont.js&quot;&gt;&lt;/script&gt;&lt;script&gt;WebFont.load(&#123;  custom: &#123;    families: [&#39;myfont&#39;],  &#125;,  classes: false,  active() &#123;    document.body.style.fontFamily = &#39;myfont&#39;;  &#125;,&#125;);&lt;/script&gt;</code></pre><p>这样浏览器一开始就会使用默认字体渲染内容，等字体加载完成后再使用特殊字体重新渲染。</p><h3 id="link-preload"><a href="#link-preload" class="headerlink" title="link+preload"></a>link+preload</h3><h1 id="字体基础知识"><a href="#字体基础知识" class="headerlink" title="字体基础知识"></a>字体基础知识</h1><h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><blockquote><p>现代 Web 开发，只需引入 <code>woff2</code> 就好，没有必要再引入多种不同格式的字体了</p></blockquote><h3 id="ttf"><a href="#ttf" class="headerlink" title="ttf"></a><code>ttf</code></h3><p>所有主流浏览器都支持 <code>ttf</code></p><h3 id="otf"><a href="#otf" class="headerlink" title="otf"></a><code>otf</code></h3><p><code>otf</code> 由 <code>ttf</code> 演化而来</p><p><code>ttf</code> 和 <code>otf</code> 都没压缩，文件更大</p><h3 id="woff"><a href="#woff" class="headerlink" title="woff"></a><code>woff</code></h3><p>为 Web 创建，经过压缩，一般比 <code>ttf</code> 小 40%</p><p>现代浏览器都支持 <code>woff</code></p><h3 id="woff2"><a href="#woff2" class="headerlink" title="woff2"></a><code>woff2</code></h3><p><code>woff2</code> 是 <code>woff</code> 的下一代。<code>woff2</code> 格式在原有基础上提升了 30% 的压缩率</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>其他还有 <code>eot</code> <code>svg</code> 等，作用有限，可以忽略</p><p>下图是各种字体格式的浏览器兼容情况（来源：<a href="https://link.juejin.cn/?target=https://creativemarket.com/blog/the-missing-guide-to-font-formats">creativemarket.com&#x2F;blog&#x2F;the-mi…</a>）</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c64e2ccb26974b149a21f270ca22e594~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p><h2 id="字体定义"><a href="#字体定义" class="headerlink" title="字体定义"></a>字体定义</h2><p>参考1：<a href="https://github.com/chokcoco/iCSS/issues/6">https://github.com/chokcoco/iCSS/issues/6</a></p><p>参考2：<a href="https://juejin.cn/post/6844903912760147982">https://juejin.cn/post/6844903912760147982</a></p><p>字体分为 “衬线” 字体 和“无衬线” 字体。</p><pre><code class="css">&#123;  font-family:     system-ui,-apple-system,BlinkMacSystemFont,segoe ui,Roboto,    Helvetica,Arial,    sans-serif,apple color emoji,segoe ui emoji,segoe ui symbol;&#125;</code></pre><ol><li>system-ui，使用各个支持平台上的默认系统字体</li><li>-apple-system， 在一些稍低版本 Mac OS X 和 iOS 上，它针对旧版上的 Neue Helvetica 和 Lucida Grande 字体，升级使用更为合适的 San Francisco Fonts</li><li>BlinkMacSystemFont，针对一些 Mac OS X 上的 Chrome 浏览器，使用系统默认字体</li><li>segoe ui，在 Windows 及 Windows Phone 上选取系统默认字体</li><li>Roboto，面向 Android 和一些新版的的 Chrome OS</li><li>Helvetica,Arial，在针对不同操作系统不同平台设定采用默认系统字体后，针对一些低版本浏览器的降级方案</li><li>sans-serif，兜底方案，保证字体风格统一，至少也得是无衬线字体</li></ol><p>上述 5 个字体族定义，优先级由高到底，可以看到，它们 5 个都并非某个特定字体，基本的核心思想都是选择对应平台上的默认系统字体。</p><p>涵盖了 iOS、MAC OS X、Android、Windows、Windows Phone 基本所有用户经常使用的主流操作系统。</p><p>使用系统默认字体的主要原因是性能。字体通常是网站上加载的最大&#x2F;最重的资源之一。如果我们可以使用用户机器上已有的字体，我们就完全不需要再去获取字体资源，从而使加载时间明显加快。</p><p>并且系统字体的优点在于它与当前操作系统使用的相匹配，因此它的文本展示必然也是一个让人舒适展示效果。</p><p>当然，上述 <code>font-family</code> 的定义不一定是最佳的。譬如天猫在最前面添加了 <code>&quot;PingFang SC&quot;,miui,..</code>必定也有他们的业务上的考虑。但是一些 fallback 方案向后兼容的思想都是一致的，值得参考学习。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS字体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSI七层模型</title>
      <link href="/2022/11/22/OSI%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/"/>
      <url>/2022/11/22/OSI%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="七层模型"><a href="#七层模型" class="headerlink" title="七层模型"></a>七层模型</h1><h2 id="OSI-七层模型"><a href="#OSI-七层模型" class="headerlink" title="OSI 七层模型"></a>OSI 七层模型</h2><ol><li>应用层：应用软件使用的协议。网页 HTTP，邮件 SMTP、POP3。</li><li>表示层：觉得数据的展现（编码）形式，像电影：RMVB、AVI、MKV 等等。</li><li>会话层：为两端通讯实体建立连接，有认证鉴权以及检查点记录（可以断点续传）。</li><li>传输层：提供逻辑通信+可不可靠通讯的功能。TCP、UDP。</li><li>网络层：路由选路，IP 地址就在这一层，选择本次通信使用的协议（http、ftp 等），指定路由策略及访问控制策略。</li><li>数据链路层：MAC 地址相关。</li><li>物理层：规定传输标准，比特流传输（就是网线的标准）。</li></ol><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p>网段下面可以再划分子网！</p><h3 id="ARP-协议"><a href="#ARP-协议" class="headerlink" title="ARP 协议"></a>ARP 协议</h3><p>理解：就是帮你找别人的 mac 地址的！</p><p>每台主机都有 ARP 缓冲区，缓存 IP 和 MAC 的映射。</p><p>流程：</p><ol><li>发送的时候，检查自己的 ARP 表有没有 IP 和 MAC 的映射，没有就拿自己的 IP、mac 地址已经别人的 IP 向本地网段发送 ARP 请求广播包。</li><li>别的主机如果不同就忽略广播包，如果相同，该主机将发送端的 IP 和 MAC 存入自己的 ARP 表，如果已存在则覆盖，再向发送者回传一个 ARP 响应包。</li><li>源主机收到响应包，将目的主机 IP 和 MAC 存入自己的 ARP 表，并开始传输。</li><li>一直没收到 ARP 响应，则表示查询失败。</li></ol><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><p>原来传输层管的端口！</p><p>网络层管的 IP！</p><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><h2 id="1-七层模型流程"><a href="#1-七层模型流程" class="headerlink" title="1. 七层模型流程"></a>1. 七层模型流程</h2><p>作者：繁星亮与鲍包包<br>链接：<a href="https://www.zhihu.com/question/24002080/answer/31817536">https://www.zhihu.com/question/24002080/answer/31817536</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>感谢知乎一路给我带来的知识，很惭愧自己一直潜水，于是决定竭尽所能地回答这个问题。（才疏学浅，如有纰漏，请海涵。）</p><p>自己入门的时候也看了很多书籍、google 及 baidu，但是要不就是答主自己都没有弄懂主胡乱粘贴别处的答案，要不就是技术大拿不屑讨论这种问题，结果答非所问，没能够解决自己的疑问。</p><p>此处希望能够略尽绵力为楼主解惑，废话不多说，开始答题：</p><p>-—————————————————————————————————————————————–</p><p>先回顾一下 OSI 七层模型有些啥内容：</p><p><img src="https://pic3.zhimg.com/50/be078715b1914a9ff86882019d8d65fc_720w.jpg?source=1940ef5c" alt="img"><img src="https://pic3.zhimg.com/80/be078715b1914a9ff86882019d8d65fc_1440w.jpg?source=1940ef5c" alt="img"></p><p>（OSI 模型与 TCP&#x2F;IP 模型类似，这里只针对 OSI 模型展开）</p><p>撇开复杂与晦涩难懂的术语不说，个人理解七个层次通俗来说主要实现以下内容：</p><p><strong><a href="https://www.zhihu.com/search?q=%E5%BA%94%E7%94%A8%E5%B1%82&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:31817536%7D">应用层</a>：</strong>就是应用软件使用的协议，如邮箱使用的 POP3，SMTP、远程登录使用的 Telnet、获取 IP 地址的 DHCP、域名解析的 DNS、网页浏览的<a href="https://www.zhihu.com/search?q=http%E5%8D%8F%E8%AE%AE&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:31817536%7D">http 协议</a>等；这部分协议主要是规定应用软件如何去进行通信的。</p><p>（应用层此部分有修改，感谢@小张指正。）</p><p><strong><a href="https://www.zhihu.com/search?q=%E8%A1%A8%E7%A4%BA%E5%B1%82&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:31817536%7D">表示层</a>：</strong>决定数据的展现（编码）形式，如同一部电影可以采样、量化、编码为 RMVB、AVI，一张图片能够是 JPEG、BMP、PNG 等。</p><p><strong>会话层：</strong>为两端通信实体建立连接（会话），中间有认证鉴权以及检查点记录（供会话意外中断的时候可以继续，类似断点续传）。</p><p><strong>传输层：</strong>将一个数据&#x2F;文件斩件分成很多小段，标记顺序以被对端接收后可以按顺序重组数据，另外标记该应用程序使用的端口号及提供 QOS。（不同的应用程序使用不同计算机的端口号，同样的应用程序需要使用一样的端口号才能正常通信）</p><p><strong>网络层：</strong>路由选路，选择本次通信使用的协议（http、ftp 等），指定路由策略及访问控制策略。（IP 地址在这一层）</p><p><strong>数据链路层：</strong>根据端口与 MAC 地址，做分组（VLAN）隔离、端口安全、访问控制。（MAC 地址在这一层）处理 VLAN 内的数据帧转发，跨 VLAN 间的访问，需要上升到网络层。</p><p><strong><a href="https://www.zhihu.com/search?q=%E7%89%A9%E7%90%86%E5%B1%82&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:31817536%7D">物理层</a>：</strong>将数据最终编码为用 0、1 标识的<a href="https://www.zhihu.com/search?q=%E6%AF%94%E7%89%B9%E6%B5%81&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:31817536%7D">比特流</a>，然后传输。（例如将题主头像的图片，变为一串 01100111100 这样的数字来表示）。</p><p><strong><a href="https://www.zhihu.com/search?q=%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:31817536%7D">基础理论</a>说完，接着回答题主的主题：</strong></p><p>两主机通信的过程，从发送者（以下简称 A）到接收者（以下简称 B），属于从 7 层（应用层）-&gt;1 层（物理层）封装，然后传输到远端，再从 1 层（物理层）-&gt;7 层（应用层）解封装的过程。</p><p>1、 当 A 打开了 QQ 这个软件，相当就到达<strong>应用层</strong>了；因为软件会根据你的操作调动机器底层的硬件工作了。</p><p>2、 当 A 往 QQ 这个软件的聊天窗口里面输入信息，发出后，QQ 会将这个信息保存在本地聊天记录文件 MSGEX.db（一般就保存在 QQ 目录下以你的 QQ 号码为文件夹里）。以某种格式编码&#x2F;保存某种信息，这可以理解为<strong>表示层</strong>了。</p><p>3、 当 A 打开与 B 的聊天窗口，输入信息，按下“输入”按钮，用户的操作就完结了，剩下都是机器自己的操作了。实际传输之前 QQ 会先建立 A 与 B 的会话连接，才真正开始传输信息&#x2F;数据（你可以理解借传输文件理解：你发送文件给对方，要等待对方按下接收，才算建立了会话，然后才开始传输。）这算<strong>会话层</strong>了。</p><p>4、 会话建立后，会将 A 发的信息斩件，如 A 发送“你吃了饭没有”？<strong>传输层</strong>将这句话斩成“你”“吃”“了”“饭”“没”“有”6 个数据段，标记号使用的端口号，然后准备发出去。</p><p>5、 接上一层，信息还未发出去，这时候在<strong>网络层</strong>做<a href="https://www.zhihu.com/search?q=%E8%B7%AF%E7%94%B1%E9%80%89%E8%B7%AF&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:31817536%7D">路由选路</a>，可以理解为，从 A 家出去，可以分别经“联通”“电信”“移动”3 个网络中的一个再到 B 家。</p><p>网络层根据<a href="https://www.zhihu.com/search?q=%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:31817536%7D">路由协议</a>负责选路（根据链路质量、带宽、开销等方法论）。假设最后选了 2 条，可能就 A-&gt;联通-&gt;B 发送“你”“吃”“了”3 个数据段，A-&gt;电信-&gt;B 发送“饭”“没”“有”3 个数据段。</p><p>选路后，这一层要标记 IP 包头，包头主要内容是源 IP 地址，目的 IP 地址，使用什么协议。其中源、目的 IP 相当于你寄信的时候的收发的地址与<a href="https://www.zhihu.com/search?q=%E9%82%AE%E6%94%BF%E7%BC%96%E7%A0%81&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:31817536%7D">邮政编码</a>，标记出发送者与接收者。而协议相当于这封信到底用什么语言书写。（只有保证 2 端使用同种语言，才能确保通信起来，否则你用英文写信给大妈，大妈怎么看得懂呢？）</p><p>6、 然后再到<strong>数据链路层</strong>，数据链路层主要是负责同一个子网内的通信的。例如 A、B 连接在同一台二层交换机，就属于同一个子网，那么数据帧的通信室是不需要通过网络层的（即<a href="https://www.zhihu.com/search?q=%E4%B8%89%E5%B1%82%E4%BA%A4%E6%8D%A2%E6%9C%BA&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:31817536%7D">三层交换机</a>或者路由器），直接在这台二层交换机就过去了。这一层打的是 MAC 地址的帧头，对于上述通信过程来说，就是为数据帧打上 A 的机器的 MAC 与 A 的网关的 MAC。这一层的工作就完成了。</p><p>7、 最后一层了，经过上述斩件、打完各层标签后的 6 个数据帧，物理层将他们翻译文 6 段 0、1 表示的比特流，然后通过光纤、铜缆进行传输。</p><p>8、 当比特流传输到了远端，接着 B 的机器按照上述的 1~7 的步骤反方向运行一次即可（即有物理层到应用层）。就是一层层读取标签，传输给标签标记着的相应对象，然后摘除标签，再读取上一层标签，直到最后 B 的应用程序能够读到 A 往应用程序输入的数据为止。</p><p>-——————————————————————————————————————————————-</p><p>对于题主的评论，补充 2 个图；</p><p>2 个主机之间的通信，对于 2 台主机来说，肯定是都需要跨越 7 层的，而平常说的只需要去到 2 层或者 3 层，其实是对于<a href="https://www.zhihu.com/search?q=%E4%B8%AD%E9%97%B4%E7%B3%BB%E7%BB%9F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:31817536%7D">中间系统</a>而言的，就是说中间的交换机、路由器而言；</p><p>例如图 1 的假设两端的通信实体在一个局域网内，其实传输的数据包去到交换机时，交换机拆开二层帧头，再查自身的 MAC 地址表，发现表里面有对应的 MAC 地址，然后对应的对口是哪个，接着就把帧发送到该端口转发出去，它的任务就完成了。根本不需要到达<a href="https://www.zhihu.com/search?q=%E7%BD%91%E7%BB%9C%E5%B1%82&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:31817536%7D">网络层</a>的意思是，根本都不需要拆卡 3 层的 IP 包头来读取里面的信息。</p><p>通过转发，最好到达 B 主机，然后从 1 层拆到 7 层，B 用户的主机最终就读取到信息了。</p><p><img src="https://pica.zhimg.com/80/6e5c71b163a849019ec55a1267d64930_1440w.jpg?source=1940ef5c" alt="img"></p><p>对于图 2，由于 A、B 两通信实体跨域<a href="https://www.zhihu.com/search?q=%E5%B9%BF%E5%9F%9F%E7%BD%91&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:31817536%7D">广域网</a>，所以光靠 MAC 地址表，肯定是查不到的，这时候路由器会把 IP 包头也拆开，读取目的 IP 地址，再查<a href="https://www.zhihu.com/search?q=%E8%B7%AF%E7%94%B1%E8%A1%A8&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:31817536%7D">路由表</a>，就知道往哪个端口发出去了。然后层层转发，就可以达到目的地了，接下来就和图 1 的一样了。</p><p><img src="https://pic1.zhimg.com/80/d16094e183b0e225719c4f614e75e7bc_1440w.jpg?source=1940ef5c" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>prettier文件配置</title>
      <link href="/2022/11/22/prettier%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/11/22/prettier%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h2><p>格式化代码工具</p><p>在项目顶层创建：.prettierrc 文件</p><pre><code class="json">&#123;  &quot;printWidth&quot;: 80, //达到该宽度即换行  &quot;tabWidth&quot;: 2, //tab缩进字符长度  &quot;singleQuote&quot;: false, //是否为但引号  &quot;trailingComma&quot;: &quot;es5&quot;, //‘none’/‘es5’/‘all’，在多行逗号分隔的句法结构中尽可能打印尾随逗号  &quot;semi&quot;: false, //在语句的末尾打印分号  &quot;useTabs&quot;: false, //使用制表符而不是空格缩进行  &quot;quoteProps&quot;:&quot;as-needed&quot;, //&lt;as-needed|consistent|preserve&gt;  &quot;jsxSingleQuote&quot;: false, //jsx中单引号替代引号  &quot;bracketSpacing&quot;: true, // 对象两边的空格 true: &#123; name: &quot;bing&quot; &#125;, false: &#123;name: &quot;bing&quot;&#125;  &quot;bracketSameLine&quot;: false, //将&gt;多行 HTML（HTML、JSX、Vue、Angular）元素放在最后一行的末尾，而不是单独放在下一行（不适用于自闭合元素）。  &quot;jsxBracketSameLine&quot;: false, //jsx中，和bracketSameLine一个意思  // &quot;rangeStart:&quot;: 0, //仅格式化文件的一部分, 开始偏移量 默认0  // &quot;rangeEnd&quot;: Infinity, //仅格式化文件的一部分 结束偏移量 默认Infinity  // &quot;requirePragma&quot;:false, //开启后，仅对文件头部注释中 带有 @prettier / @format 的文件进行格式化，可以避免将大型库格式化  // &quot;insertPragma&quot;: false, //  &quot;proseWrap&quot;:&quot;preserve&quot;, //&lt;always|never|preserve&gt; Prettier 将按原样包装 markdown 文本，因为某些服务使用换行敏感的渲染器  &quot;htmlWhitespaceSensitivity&quot;: &quot;css&quot;, //&lt;css|strict|ignore&gt;  指定的全局空格敏感性 css 尊重CSSdisplay属性默认值。strict标签周围空格重要，ignore所有标签周围空格不重要  &quot;vueIndentScriptAndStyle&quot;: false, //是否缩进 Vue 文件中的代码&lt;script&gt;和&lt;style&gt;标签  &quot;endOfLine&quot;:&quot;auto&quot;, //&lt;lf|crlf|cr|auto&gt; git提交后的文件结尾，windows和MacOS表现不同，可以统一避免 git diff  &quot;arrowParens&quot;: &quot;always&quot; //(x) =&gt; &#123;&#125; 箭头函数参数只有一个时是否要有小括号。avoid：省略括号 &lt;always|avoid&gt;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
          <category> nodejs </category>
          
          <category> npm </category>
          
          <category> prettier </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编辑器工具配置</title>
      <link href="/2022/11/22/%E7%BC%96%E8%BE%91%E5%99%A8%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/11/22/%E7%BC%96%E8%BE%91%E5%99%A8%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="VScode配置"><a href="#VScode配置" class="headerlink" title="VScode配置"></a>VScode配置</h1><h2 id="配置Git-bash默认命令行"><a href="#配置Git-bash默认命令行" class="headerlink" title="配置Git-bash默认命令行"></a>配置Git-bash默认命令行</h2><p>修改settings.json</p><pre><code class="json">&quot;terminal.integrated.profiles.windows&quot;: &#123;  &quot;JavaScript Debug Terminal&quot;: &#123;    // 自己的安装路径, 是bin下的bash.exe,别写错了    &quot;path&quot;: &quot;D:\\Software\\Git\\bin\\bash.exe&quot;,      // 使自定义命令的别名生效      &quot;args&quot;: [        &quot;-l&quot;      ]  &#125;&#125;,  // 下面这里的这个名称, 换成别的, 会提示有错误, 但是不影响使用  // 因为个人有强迫症, 看不得那个圆角提示  &quot;terminal.integrated.defaultProfile.windows&quot;: &quot;JavaScript Debug Terminal&quot;,</code></pre><h1 id="设置console-log-快捷键方法-其他也一样"><a href="#设置console-log-快捷键方法-其他也一样" class="headerlink" title="设置console.log()快捷键方法,其他也一样"></a>设置console.log()快捷键方法,其他也一样</h1><p>原文档地址：<a href="https://blog.csdn.net/qq_34412985/article/details/113814580">https://blog.csdn.net/qq_34412985/article/details/113814580</a></p><p>console.log在我们的日常前端开发中是使用频率特别高的一句代码，那我们怎样在vscode编译器中快速的打出来呢。其实很简单只要两步就行:</p><ol><li>在VScode中打开文件 → 首选项 → 用户代码片段 → 在搜索框中搜索 JavaScript 选择 JavaScript.json</li><li>然后我们在其中把关键注释的代码打开就好了</li></ol><p><a href=""><img src="/2022/11/22/%E7%BC%96%E8%BE%91%E5%99%A8%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/console-1.png" alt="img"></a></p><p> 打开后，可以将代码适当修改，看个人习惯</p><p><a href=""><img src="/2022/11/22/%E7%BC%96%E8%BE%91%E5%99%A8%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/console-2.png" alt="img"></a></p><p>保存后看效果：</p><p><a href=""><img src="/2022/11/22/%E7%BC%96%E8%BE%91%E5%99%A8%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/console-3.png" alt="img"></a></p><p> 回车效果如下：</p><p><a href=""><img src="/2022/11/22/%E7%BC%96%E8%BE%91%E5%99%A8%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/console-4.png" alt="img"></a></p><p>如果继续使用log为关键字的话要选择下图中的，否则console.log()不显示</p><p><a href=""><img src="/2022/11/22/%E7%BC%96%E8%BE%91%E5%99%A8%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/console-5.png" alt="img"></a></p><h1 id="VScode插件"><a href="#VScode插件" class="headerlink" title="VScode插件"></a>VScode插件</h1><h2 id="koroFileHeader"><a href="#koroFileHeader" class="headerlink" title="koroFileHeader"></a>koroFileHeader</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ol><li>VSCode插件: 用于一键生成文件头部注释并自动更新最后编辑人和编辑时间、函数注释自动生成和参数提取。</li><li>插件可以帮助用户养成良好的编码习惯，规范整个团队风格。</li><li>从2018年5月维护至今, 关闭issue 300+ ，拥有250K+的用户，VSCode图表统计日安装用户100多-400多人，</li><li>经过多版迭代后，插件支持所有主流语言,灵活方便，文档齐全，食用简单！</li><li>觉得插件不错的话，就给个<a href="https://github.com/OBKoro1/koro1FileHeader">Star</a>⭐️吧~</li></ol><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ol><li>自动生成文件头部注释，自动更新最后编辑人、最后编辑时间等。</li><li>一键生成函数注释，支持函数参数自动提取并列到注释中。</li><li>支持添加佛祖保佑永无bug、神兽护体、甩葱少女等好玩有趣的图像注释</li><li>配置非常灵活方便，各种细节都能配置，可以量身打造适合你的注释。</li><li>支持所有主流语言, 配置文档非常详细，齐全。</li></ol><h2 id="es6-string-html"><a href="#es6-string-html" class="headerlink" title="es6-string-html"></a>es6-string-html</h2><p> <img src="https://github.com/mydesireiscoma/es6-string-html/raw/HEAD/docs/demo.png" alt="Example"></p><h2 id="Tabnine-人工智能助手"><a href="#Tabnine-人工智能助手" class="headerlink" title="Tabnine - 人工智能助手"></a>Tabnine - 人工智能助手</h2><p>是一款人工智能代码完成工具，AI 代码片段、代码建议、代码预测、代码提示，<code>PRO</code>每个月12刀，支持洞察与分析、公共代码的高级完成、定制选项等，穷还没体验过。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/65f43fdb7ce84675ae7b27456c157d88~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p><p><strong>官方地址：</strong><a href="https://link.juejin.cn/?target=https://marketplace.visualstudio.com/items?itemName=TabNine.tabnine-vscode">marketplace.visualstudio.com&#x2F;items?itemN…</a></p><h2 id="Vetur"><a href="#Vetur" class="headerlink" title="Vetur"></a>Vetur</h2><p>这款插件相信不用我多说，想必大家都知道或者用过，它提供了 Vue 特定的语法语义突出显示、代码片段和API语法以错误检查调试等。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fde9052aa5964ce19db4b7b1ec92932a~tplv-k3u1fbpfcp-watermark.awebp" alt="vetur"></p><p><strong>官方地址：</strong><a href="https://link.juejin.cn/?target=https://marketplace.visualstudio.com/items?itemName=octref.vetur">marketplace.visualstudio.com&#x2F;items?itemN…</a></p><h2 id="Volar"><a href="#Volar" class="headerlink" title="Volar"></a>Volar</h2><p>如果你的项目<code>Vue3.0</code>推荐用这款插件，体验上会更好。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d2fed306bad24016a9229987a6ff462b~tplv-k3u1fbpfcp-watermark.awebp" alt="-w691"></p><p><code>Volar</code> 是一个专为 Vue 3 构建的语言支持插件，它基于@vue&#x2F;reactivity按需计算 TypeScript 来优化类似于原生 TypeScript 语言服务的性能。</p><p><strong>官方地址：</strong><a href="https://link.juejin.cn/?target=https://marketplace.visualstudio.com/items?itemName=johnsoncodehk.volar">marketplace.visualstudio.com&#x2F;items?itemN…</a></p><h2 id="翻译-英汉词典-代码翻译"><a href="#翻译-英汉词典-代码翻译" class="headerlink" title="翻译(英汉词典) 代码翻译"></a>翻译(英汉词典) 代码翻译</h2><p>在线翻译，翻译出来的结果真慢，吐槽。这款本地77万词条英汉词典，不依赖任何在线翻译API，无查询次数限制，秒输出结果。</p><p>这款插件支持<code>驼峰、小驼峰、下划线</code>等等写法来写变量名、属性名、类名和方法名的。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83f1c06b3fe94e7b9a1b8a1a48ac8649~tplv-k3u1fbpfcp-watermark.awebp" alt="-w1205"></p><p><strong>官方地址：</strong><a href="https://link.juejin.cn/?target=https://marketplace.visualstudio.com/items?itemName=CodeInChinese.EnglishChineseDictionary">marketplace.visualstudio.com&#x2F;items?itemN…</a></p><h2 id="Material-Icon-Theme"><a href="#Material-Icon-Theme" class="headerlink" title="Material Icon Theme"></a>Material Icon Theme</h2><p>非常齐全的图标，可以说你想要包含在这里面，只截了其中一小部分图。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d5270dc1de5c423287998d85db98e7ec~tplv-k3u1fbpfcp-watermark.awebp" alt="-w895"></p><p><strong>官方地址：</strong><a href="https://link.juejin.cn/?target=https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme">marketplace.visualstudio.com&#x2F;items?itemN…</a></p><h2 id="vscode-icons"><a href="#vscode-icons" class="headerlink" title="vscode-icons"></a>vscode-icons</h2><p>这一款是VSCode官方的图标主题包，看个人喜好选择图标库。效果如下</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/538499379fd8431ea772a9425686a0ac~tplv-k3u1fbpfcp-watermark.awebp" alt="-w330"></p><p><strong>官方地址：</strong><a href="https://link.juejin.cn/?target=https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons">marketplace.visualstudio.com&#x2F;items?itemN…</a></p><h2 id="Bracket-Pair-Colorizer-v1-60内置"><a href="#Bracket-Pair-Colorizer-v1-60内置" class="headerlink" title="Bracket Pair Colorizer(v1.60内置)"></a>Bracket Pair Colorizer(v1.60内置)</h2><p>这个插件使用颜色来标识匹配的括号。代码非常多的情况，括号也就变的非常多，如果删除某个属性名对象，没有颜色区分可以就会误删。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e1ebd08475c48388b268e1a30eca3c9~tplv-k3u1fbpfcp-watermark.awebp" alt="-w1021"></p><p><strong>官方地址：</strong><a href="https://link.juejin.cn/?target=https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer">marketplace.visualstudio.com&#x2F;items?itemN…</a></p><pre><code class="js">// settings.json  &quot;editor.bracketPairColorization.enabled&quot;: true,// 个性化  &quot;workbench.colorCustomizations&quot;: &#123;    &quot;editorBracketHighlight.foreground1&quot;: &quot;#ffd700&quot;,    &quot;editorBracketHighlight.foreground2&quot;: &quot;#da70d6&quot;,    &quot;editorBracketHighlight.foreground3&quot;: &quot;#87cefa&quot;,    &quot;editorBracketHighlight.foreground4&quot;: &quot;#ffd700&quot;,    &quot;editorBracketHighlight.foreground5&quot;: &quot;#da70d6&quot;,    &quot;editorBracketHighlight.foreground6&quot;: &quot;#87cefa&quot;,    &quot;editorBracketHighlight.unexpectedBracket.foreground&quot;: &quot;#ff0000&quot;  &#125;</code></pre><blockquote><p>更多配置可以参考这篇文章 <a href="https://link.juejin.cn/?target=https://blog.csdn.net/qq_21567385/article/details/120387446">blog.csdn.net&#x2F;qq_21567385…</a></p></blockquote><h2 id="GitLens"><a href="#GitLens" class="headerlink" title="GitLens"></a>GitLens</h2><p>增强Git功能构建到Visual Studio代码可视化代码作者一眼就通过Git指责注释和代码镜头,无缝导航和探索Git存储库。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ae37ecac6cae4451ac77433ce6562dfa~tplv-k3u1fbpfcp-watermark.awebp" alt="-w1078"> <strong>官方地址：</strong><a href="https://link.juejin.cn/?target=https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">marketplace.visualstudio.com&#x2F;items?itemN…</a></p><h2 id="Git-History"><a href="#Git-History" class="headerlink" title="Git History"></a>Git History</h2><p>查看git日志、文件历史、比较分支或提交。</p><p>当我们需要查看文件的历史，可能会借助另外一个Git UI工具查看，耶，只要点击文件的右上角图标就能看到历史代码还有代码差异性。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4c2bbfb723714ed8b753754d0b1e22ca~tplv-k3u1fbpfcp-watermark.awebp" alt="-w1285"></p><p><strong>官方地址：</strong><a href="https://link.juejin.cn/?target=https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory">marketplace.visualstudio.com&#x2F;items?itemN…</a></p><h2 id="Path-Intellisense-路径智能提示"><a href="#Path-Intellisense-路径智能提示" class="headerlink" title="Path Intellisense 路径智能提示"></a>Path Intellisense 路径智能提示</h2><p>当我们需要引入某个文件或者图片，文件夹层级可能很多，我们可以通过这款插件来提示我们当前下的文件有哪些。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e16ed817bd0e4c32b92d894f92b6a3b4~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p><p><strong>官方地址：</strong><a href="https://link.juejin.cn/?target=https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense">marketplace.visualstudio.com&#x2F;items?itemN…</a></p><h2 id="Auto-Rename-Tag"><a href="#Auto-Rename-Tag" class="headerlink" title="Auto Rename Tag"></a>Auto Rename Tag</h2><p>自动重命名成对的<code>HTML/XML</code>标签。</p><p>当我们修改<code>&lt;a-button&gt;&lt;/c-button&gt;</code>的标签时就会生成<code>&lt;a-button&gt;&lt;/a-button&gt;</code>。</p><p><strong>官方地址：</strong><a href="https://link.juejin.cn/?target=https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag">marketplace.visualstudio.com&#x2F;items?itemN…</a></p><h2 id="Auto-Close-Tag"><a href="#Auto-Close-Tag" class="headerlink" title="Auto Close Tag"></a>Auto Close Tag</h2><p>自动添加<code>HTML/XML</code>关闭标签。</p><p>当我们写下<code>&lt;c-button&gt;</code>时就会生成<code>&lt;c-button&gt;&lt;/c-button&gt;</code>。</p><p><strong>官方地址：</strong><a href="https://link.juejin.cn/?target=https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag">marketplace.visualstudio.com&#x2F;items?itemN…</a></p><h2 id="Live-Server"><a href="#Live-Server" class="headerlink" title="Live Server"></a>Live Server</h2><p>在本地服务器搭建自动重新加载静态特性HTML页面。</p><p>html页面中鼠标右键选择 <code>open with Live Server</code></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38c693c5d32d45059505bfe5da193844~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p><p><strong>官方地址：</strong><a href="https://link.juejin.cn/?target=https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer">marketplace.visualstudio.com&#x2F;items?itemN…</a></p><h2 id="Prettier-Code-formatter"><a href="#Prettier-Code-formatter" class="headerlink" title="Prettier - Code formatter"></a>Prettier - Code formatter</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/998b7b24d1fa474898482861d06e22b9~tplv-k3u1fbpfcp-watermark.awebp" alt="-w714"> Prettier是一个代码格式化程序。它通过解析代码并使用它自己的规则重新打印代码来强制实现一致的样式，这些规则考虑到最大行长度，在必要时格式化代码。</p><pre><code class="json">// vscode setting.json&#123;  &quot;editor.formatOnSave&quot;: false, // 在保存时格式化文件  &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;,  &quot;[javascript]&quot;: &#123;    &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;  &#125;,  &quot;[vue]&quot;: &#123;    &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;  &#125;&#125;</code></pre><p><strong>官方地址：</strong><a href="https://link.juejin.cn/?target=https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">marketplace.visualstudio.com&#x2F;items?itemN…</a></p><h2 id="ESlint"><a href="#ESlint" class="headerlink" title="ESlint"></a>ESlint</h2><p>在一个多人协同开发的团队中，统一的代码编写规范非常重要。一套规范可以让我们编写的代码达到一致的风格，提高代码的可读性和统一性。自然维护性也会有所提高。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7414df2047004edf89c48550cd07506f~tplv-k3u1fbpfcp-watermark.awebp" alt="-w735"> 以下eslint规范代码依托于 vue 官方的 <code>eslint</code> 规则 <code>eslint-config-vue</code> 做了少许的修改。大家可以按照自己的需求进行定制化配置。</p><pre><code class="json">// .eslintrc.jsmodule.exports = &#123;  root: true,  parserOptions: &#123;    parser: &#39;babel-eslint&#39;,    sourceType: &#39;module&#39;  &#125;,  env: &#123;    browser: true,    node: true,    es6: true,  &#125;,  extends: [&#39;plugin:vue/recommended&#39;, &#39;eslint:recommended&#39;],  // add your custom rules here  //it is base on https://github.com/vuejs/eslint-config-vue  rules: &#123;    &quot;vue/max-attributes-per-line&quot;: [2, &#123;      &quot;singleline&quot;: 10,      &quot;multiline&quot;: &#123;        &quot;max&quot;: 1,        &quot;allowFirstLine&quot;: false      &#125;    &#125;],    &quot;vue/singleline-html-element-content-newline&quot;: &quot;off&quot;,    &quot;vue/multiline-html-element-content-newline&quot;:&quot;off&quot;,    &quot;vue/name-property-casing&quot;: [&quot;error&quot;, &quot;PascalCase&quot;],    &quot;vue/no-v-html&quot;: &quot;off&quot;,    &#39;accessor-pairs&#39;: 2,    &#39;arrow-spacing&#39;: [2, &#123;      &#39;before&#39;: true,      &#39;after&#39;: true    &#125;],    &#39;block-spacing&#39;: [2, &#39;always&#39;],    &#39;brace-style&#39;: [2, &#39;1tbs&#39;, &#123;      &#39;allowSingleLine&#39;: true    &#125;],    &#39;camelcase&#39;: [0, &#123;      &#39;properties&#39;: &#39;always&#39;    &#125;],    &#39;comma-dangle&#39;: [2, &#39;never&#39;],    &#39;comma-spacing&#39;: [2, &#123;      &#39;before&#39;: false,      &#39;after&#39;: true    &#125;],    &#39;comma-style&#39;: [2, &#39;last&#39;],    &#39;constructor-super&#39;: 2,    &#39;curly&#39;: [2, &#39;multi-line&#39;],    &#39;dot-location&#39;: [2, &#39;property&#39;],    &#39;eol-last&#39;: 2,    &#39;eqeqeq&#39;: [&quot;error&quot;, &quot;always&quot;, &#123;&quot;null&quot;: &quot;ignore&quot;&#125;],    &#39;generator-star-spacing&#39;: [2, &#123;      &#39;before&#39;: true,      &#39;after&#39;: true    &#125;],    &#39;handle-callback-err&#39;: [2, &#39;^(err|error)$&#39;],    &#39;indent&#39;: [2, 2, &#123;      &#39;SwitchCase&#39;: 1    &#125;],    &#39;jsx-quotes&#39;: [2, &#39;prefer-single&#39;],    &#39;key-spacing&#39;: [2, &#123;      &#39;beforeColon&#39;: false,      &#39;afterColon&#39;: true    &#125;],    &#39;keyword-spacing&#39;: [2, &#123;      &#39;before&#39;: true,      &#39;after&#39;: true    &#125;],    &#39;new-cap&#39;: [2, &#123;      &#39;newIsCap&#39;: true,      &#39;capIsNew&#39;: false    &#125;],    &#39;new-parens&#39;: 2,    &#39;no-array-constructor&#39;: 2,    &#39;no-caller&#39;: 2,    &#39;no-console&#39;: &#39;off&#39;,    &#39;no-class-assign&#39;: 2,    &#39;no-cond-assign&#39;: 2,    &#39;no-const-assign&#39;: 2,    &#39;no-control-regex&#39;: 0,    &#39;no-delete-var&#39;: 2,    &#39;no-dupe-args&#39;: 2,    &#39;no-dupe-class-members&#39;: 2,    &#39;no-dupe-keys&#39;: 2,    &#39;no-duplicate-case&#39;: 2,    &#39;no-empty-character-class&#39;: 2,    &#39;no-empty-pattern&#39;: 2,    &#39;no-eval&#39;: 2,    &#39;no-ex-assign&#39;: 2,    &#39;no-extend-native&#39;: 2,    &#39;no-extra-bind&#39;: 2,    &#39;no-extra-boolean-cast&#39;: 2,    &#39;no-extra-parens&#39;: [2, &#39;functions&#39;],    &#39;no-fallthrough&#39;: 2,    &#39;no-floating-decimal&#39;: 2,    &#39;no-func-assign&#39;: 2,    &#39;no-implied-eval&#39;: 2,    &#39;no-inner-declarations&#39;: [2, &#39;functions&#39;],    &#39;no-invalid-regexp&#39;: 2,    &#39;no-irregular-whitespace&#39;: 2,    &#39;no-iterator&#39;: 2,    &#39;no-label-var&#39;: 2,    &#39;no-labels&#39;: [2, &#123;      &#39;allowLoop&#39;: false,      &#39;allowSwitch&#39;: false    &#125;],    &#39;no-lone-blocks&#39;: 2,    &#39;no-mixed-spaces-and-tabs&#39;: 2,    &#39;no-multi-spaces&#39;: 2,    &#39;no-multi-str&#39;: 2,    &#39;no-multiple-empty-lines&#39;: [2, &#123;      &#39;max&#39;: 1    &#125;],    &#39;no-native-reassign&#39;: 2,    &#39;no-negated-in-lhs&#39;: 2,    &#39;no-new-object&#39;: 2,    &#39;no-new-require&#39;: 2,    &#39;no-new-symbol&#39;: 2,    &#39;no-new-wrappers&#39;: 2,    &#39;no-obj-calls&#39;: 2,    &#39;no-octal&#39;: 2,    &#39;no-octal-escape&#39;: 2,    &#39;no-path-concat&#39;: 2,    &#39;no-proto&#39;: 2,    &#39;no-redeclare&#39;: 2,    &#39;no-regex-spaces&#39;: 2,    &#39;no-return-assign&#39;: [2, &#39;except-parens&#39;],    &#39;no-self-assign&#39;: 2,    &#39;no-self-compare&#39;: 2,    &#39;no-sequences&#39;: 2,    &#39;no-shadow-restricted-names&#39;: 2,    &#39;no-spaced-func&#39;: 2,    &#39;no-sparse-arrays&#39;: 2,    &#39;no-this-before-super&#39;: 2,    &#39;no-throw-literal&#39;: 2,    &#39;no-trailing-spaces&#39;: 2,    &#39;no-undef&#39;: 2,    &#39;no-undef-init&#39;: 2,    &#39;no-unexpected-multiline&#39;: 2,    &#39;no-unmodified-loop-condition&#39;: 2,    &#39;no-unneeded-ternary&#39;: [2, &#123;      &#39;defaultAssignment&#39;: false    &#125;],    &#39;no-unreachable&#39;: 2,    &#39;no-unsafe-finally&#39;: 2,    &#39;no-unused-vars&#39;: [2, &#123;      &#39;vars&#39;: &#39;all&#39;,      &#39;args&#39;: &#39;none&#39;    &#125;],    &#39;no-useless-call&#39;: 2,    &#39;no-useless-computed-key&#39;: 2,    &#39;no-useless-constructor&#39;: 2,    &#39;no-useless-escape&#39;: 0,    &#39;no-whitespace-before-property&#39;: 2,    &#39;no-with&#39;: 2,    &#39;one-var&#39;: [2, &#123;      &#39;initialized&#39;: &#39;never&#39;    &#125;],    &#39;operator-linebreak&#39;: [2, &#39;after&#39;, &#123;      &#39;overrides&#39;: &#123;        &#39;?&#39;: &#39;before&#39;,        &#39;:&#39;: &#39;before&#39;      &#125;    &#125;],    &#39;padded-blocks&#39;: [2, &#39;never&#39;],    &#39;quotes&#39;: [2, &#39;single&#39;, &#123;      &#39;avoidEscape&#39;: true,      &#39;allowTemplateLiterals&#39;: true    &#125;],    &#39;semi&#39;: [2, &#39;never&#39;],    &#39;semi-spacing&#39;: [2, &#123;      &#39;before&#39;: false,      &#39;after&#39;: true    &#125;],    &#39;space-before-blocks&#39;: [2, &#39;always&#39;],    &#39;space-before-function-paren&#39;: [2, &#39;never&#39;],    &#39;space-in-parens&#39;: [2, &#39;never&#39;],    &#39;space-infix-ops&#39;: 2,    &#39;space-unary-ops&#39;: [2, &#123;      &#39;words&#39;: true,      &#39;nonwords&#39;: false    &#125;],    &#39;spaced-comment&#39;: [2, &#39;always&#39;, &#123;      &#39;markers&#39;: [&#39;global&#39;, &#39;globals&#39;, &#39;eslint&#39;, &#39;eslint-disable&#39;, &#39;*package&#39;, &#39;!&#39;, &#39;,&#39;]    &#125;],    &#39;template-curly-spacing&#39;: [2, &#39;never&#39;],    &#39;use-isnan&#39;: 2,    &#39;valid-typeof&#39;: 2,    &#39;wrap-iife&#39;: [2, &#39;any&#39;],    &#39;yield-star-spacing&#39;: [2, &#39;both&#39;],    &#39;yoda&#39;: [2, &#39;never&#39;],    &#39;prefer-const&#39;: 2,    &#39;no-debugger&#39;: process.env.NODE_ENV === &#39;production&#39; ? 2 : 0,    &#39;object-curly-spacing&#39;: [2, &#39;always&#39;, &#123;      objectsInObjects: false    &#125;],    &#39;array-bracket-spacing&#39;: [2, &#39;never&#39;]  &#125;&#125;</code></pre><p><strong>官方地址：</strong><a href="https://link.juejin.cn/?target=https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">marketplace.visualstudio.com&#x2F;items?itemN…</a></p><h2 id="ClassTree"><a href="#ClassTree" class="headerlink" title="ClassTree"></a>ClassTree</h2><p>比较新兴的插件，根据AST 分析文件编码的提供快速生成 jsx&#x2F;vue class结构。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/716e22049ec74b0084391e95d90986ca~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
          <category> vscode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS常用库</title>
      <link href="/2022/11/22/JS%E5%B8%B8%E7%94%A8%E5%BA%93/"/>
      <url>/2022/11/22/JS%E5%B8%B8%E7%94%A8%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>React UI 组件库<br>Ant Design ：<a href="https://ant.design/">https://ant.design/</a><br> React Bootstrap： <a href="https://react-bootstrap.github.io/">https://react-bootstrap.github.io/</a><br> MATERIAL-UI ：  <a href="https://material-ui.com/">https://material-ui.com/</a></p><p>Vue UI组件库<br> Element : <a href="https://element.eleme.io/#/zh-CN">https://element.eleme.io/#/zh-CN</a><br> vant : <a href="https://youzan.github.io/vant/#/zh-C%E2%80%A6">https://youzan.github.io/vant/#/zh-C%E2%80%A6</a><br>View UI :  <a href="https://www.iviewui.com/">https://www.iviewui.com/</a></p><p>动画库<br> Animate.css ：  <a href="https://animate.style/">https://animate.style/</a><br>常用效果组件<br> swiper ： <a href="https://www.swiper.com.cn/">https://www.swiper.com.cn/</a><br>mescroll.js   <a href="http://www.mescroll.com/api.html">http://www.mescroll.com/api.html</a></p><p>工具类轮子<br> lodash.js ：  <a href="https://www.lodashjs.com/">https://www.lodashjs.com/</a><br>Day.js  ： <a href="https://dayjs.fenxianglu.cn/">https://dayjs.fenxianglu.cn/</a><br> timeago.js ：  <a href="https://github.com/hustcc/timeago.js">https://github.com/hustcc/timeago.js</a><br>echarts  ：  <a href="https://echarts.apache.org/zh/index.html">https://echarts.apache.org/zh/index.html</a><br> Meditor.md  :  <a href="https://pandao.github.io/editor.md/">https://pandao.github.io/editor.md/</a><br> validator.js :   <a href="https://github.com/validatorjs/validator.js">https://github.com/validatorjs/validator.js</a></p><p>工具类<br>vue-draggable ：  <a href="https://www.itxst.com/vue-draggable/tutorial.html">https://www.itxst.com/vue-draggable/tutorial.html</a><br> vue-qr :   <a href="https://www.npmjs.com/package/vue-qr">https://www.npmjs.com/package/vue-qr</a><br> vue-cropper :   <a href="https://github.com/xyxiao001/vue-cropper">https://github.com/xyxiao001/vue-cropper</a><br> vue-lazyload :   <a href="https://www.npmjs.com/package/vue-lazyload">https://www.npmjs.com/package/vue-lazyload</a><br> vue-simple-upload :   <a href="https://github.com/saivarunk/vue-simple-upload">https://github.com/saivarunk/vue-simple-upload</a></p><p>作者：wlove<br>链接：<a href="https://www.zhihu.com/question/19793863/answer/2348782399">https://www.zhihu.com/question/19793863/answer/2348782399</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><ul><li><a href="https://link.zhihu.com/?target=https://github.com/ajaxorg/ace">ace</a>：Ace ，即 Ajax.org Cloud9 Editor。</li><li><a href="https://link.zhihu.com/?target=https://github.com/codemirror/CodeMirror">CodeMirror</a>：一个浏览器端的代码编辑器，用 JS 实现。</li><li><a href="https://link.zhihu.com/?target=https://github.com/ariya/esprima">esprima</a>：用于多用途分析的 ECMAScript 解析器。</li><li><a href="https://link.zhihu.com/?target=https://github.com/quilljs/quill">quill</a>：一个带有 API 的跨浏览器富文本编辑器。</li><li><a href="https://link.zhihu.com/?target=https://github.com/yabwe/medium-editor">medium-editor</a>：Medium.com 使用的所见即所得编辑器的克隆版。</li><li><a href="https://link.zhihu.com/?target=https://github.com/sofish/pen">pen</a>：享受在线编辑（支持 markdown）。</li><li><a href="https://link.zhihu.com/?target=https://github.com/raphaelcruzeiro/jquery-notebook">jquery-notebook</a>：一个易用的、简洁优雅的文本编辑器。灵感来源于 Medium。</li><li><a href="https://link.zhihu.com/?target=https://github.com/mindmup/bootstrap-wysiwyg">bootstrap-wysiwyg</a>：小巧的、兼容 bootstrap 的所见即所得的富文本编辑器。</li><li><a href="https://link.zhihu.com/?target=https://github.com/ckeditor/ckeditor-releases">ckeditor-releases</a>：适用于每个人的 web 文本编辑器。</li><li><a href="https://link.zhihu.com/?target=https://github.com/lepture/editor">editor</a>：一个 markdown 编辑器，但仍在开发中。</li><li><a href="https://link.zhihu.com/?target=https://github.com/OscarGodson/EpicEditor">EpicEditor</a>：一个可嵌入的 JavaScript Markdown 的编辑器，拥有分屏编辑、即时预览、自动保存草稿和离线支持等功能。</li><li><a href="https://link.zhihu.com/?target=https://github.com/josdejong/jsoneditor">jsoneditor</a>：查看、编辑和格式化 JSON 的 web 工具。</li><li><a href="https://link.zhihu.com/?target=https://github.com/coolwanglu/vim.js">vim.js</a>：拥有持久化 ~&#x2F;.vimrc 特性，支持 Vim 的 JavaScript 接口。</li><li><a href="https://link.zhihu.com/?target=https://github.com/neilj/Squire">Squire</a>：一个 HTML5 富文本编辑器。</li><li><a href="https://link.zhihu.com/?target=https://github.com/tinymce/tinymce">TinyMCE</a>：一个 JavaScript 富文本编辑器。</li><li><a href="https://link.zhihu.com/?target=https://github.com/basecamp/trix">trix</a>：由 Basecamp 制作，适用于每天写作的富文本编辑器。</li><li><a href="https://link.zhihu.com/?target=https://github.com/Alex-D/Trumbowyg">Trumbowyg</a>：一款轻量且惊人的所见即所得 JavaScript 编辑器</li><li><a href="https://link.zhihu.com/?target=https://github.com/facebook/draft-js">Draft.js</a>：用于构建文本编辑器的 React 框架。</li><li><a href="https://link.zhihu.com/?target=https://github.com/jhollingworth/bootstrap-wysihtml5">bootstrap-wysihtml5</a>：一款简单漂亮的所见即所得编辑器。</li><li><a href="https://link.zhihu.com/?target=https://github.com/xing/wysihtml5">wysihtml5</a>：基于 HTML5 ，渐进增强的开源富文本编辑器，利用非常严苛的规则旨在生成符合 HTML5 规范的标签，避免生成非规范标签和同行样式。</li><li><a href="https://link.zhihu.com/?target=https://github.com/PANmedia/raptor-editor">raptor-editor</a>：Raptor，一款 HTML5 所见即所得内容编辑器！</li><li><a href="https://link.zhihu.com/?target=https://github.com/kenshin54/popline">popline</a>：Popline 是一款 HTML5 富文本工具栏。</li><li><a href="https://link.zhihu.com/?target=https://github.com/summernote/summernote">Summernote</a>：一个极简的所见即所得编辑器。</li></ul><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><ul><li><a href="https://zhuanlan.zhihu.com/DevDocs">DevDocs</a>：一款多合一接口文档阅读器，界面统一、高效、排版精良。</li><li><a href="https://zhuanlan.zhihu.com/dexy">dexy</a>：一款格式自由且文艺的文档工具，可用于编写任何包含代码的技术文档。</li><li><a href="https://link.zhihu.com/?target=http://jashkenas.github.io/docco/">docco</a>：一款快且脏、百来行、文艺范的文档生成器，用 Literate CoffeeScript 实现。</li><li><a href="https://zhuanlan.zhihu.com/StyleDocco">styledocco</a>：根据样式表生成风格规范文档。</li><li><a href="https://link.zhihu.com/?target=https://github.com/rtomayko/ronn">Ronn</a>：构建手册。把对人类阅读友好的简单文本文件转换成 roff 格式文件，便于终端显示，也可以转换为 HTML ，便于 Web 端显示。</li><li><a href="https://link.zhihu.com/?target=https://github.com/tj/dox">dox</a>：一款 Node.js 开发的 JavaScript 文档生成器。Dox 不会生成结构样式严苛的文档，而是采用 JSON 表示法，以实现 markdown 和 JSDoc 风格标签。</li><li><a href="https://link.zhihu.com/?target=https://github.com/sutoiku/jsdox">jsdox</a>：一款将 JSDoc3 转换成 markdown 的文档生成器。</li><li><a href="https://link.zhihu.com/?target=https://github.com/esdoc/esdoc">ESDoc</a>：一款为 JavaScript 设计的优秀文档生成器。</li><li>[YUIDoc](<a href="https://zhuanlan.zhihu.com/YUIDoc">https://zhuanlan.zhihu.com/YUIDoc</a> - JavaScript Documentation Tool)：一款提取源码注释生成接口文档的 Node.js 应用，功能类似 Javadoc and Doxygen 。</li><li><a href="https://zhuanlan.zhihu.com/coddoc">coddoc</a>：一款 jsdoc 解析库。Coddoc 与其他工具相比)的不同之处在于，它很容易扩展，通过 coddoc.addTagHandler 和 coddoc.addCodeHandler 来添加标签和代码解析器。 Coddoc 还可以解析源码生成接口文档。</li><li><a href="https://link.zhihu.com/?target=http://www.sphinx-doc.org/">sphinx</a>：一款让创建智能且漂亮文档更加简单的工具。</li><li><a href="https://link.zhihu.com/?target=http://usejsdoc.org/">Using JSDoc</a></li><li><a href="https://link.zhihu.com/?target=http://beautifuldocs.com/">Beautiful docs</a>：一款 markdown 格式文档阅读器。</li><li><a href="https://zhuanlan.zhihu.com/documentation.js">documentation.js</a>：支持 ES2015+ 和流注释的接口文档生成器。</li><li><a href="https://link.zhihu.com/?target=https://github.com/senchalabs/jsduck">jsduck</a>：为 Sencha JavaScript 框架开发的接口文档生成器，当然其他框架也能用。</li><li><a href="https://link.zhihu.com/?target=https://github.com/Bogdan-Lyashenko/codecrumbs">codecrumbs</a>：一款用于学习和记录代码库的可视化工具，通过在源码中插入面包屑来实现功能。</li></ul><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><ul><li><a href="https://link.zhihu.com/?target=https://github.com/mholt/PapaParse">Papa Parse</a>：一款强大的 CSV 库，支持解析 CSV 文件&#x2F;字符串，也能导出 CSV。</li><li><a href="https://link.zhihu.com/?target=https://github.com/jDataView/jBinary">jBinary</a>：对用声明式语法描述文件类型和数据结构的二进制文件，进行高级 I&#x2F;O（加载、解析、操作、序列化、存储）操作。</li><li><a href="https://link.zhihu.com/?target=https://github.com/rtfpessoa/diff2html">diff2html</a>：git 差异输出解析器，也是 HTML 美化器。</li><li><a href="https://link.zhihu.com/?target=https://github.com/MrRio/jsPDF">jsPDF</a>：一款 JavaScript PDF 文件生成器。</li><li><a href="https://link.zhihu.com/?target=https://github.com/mozilla/pdf.js">PDF.js</a>：一个 JavaScript PDF 阅读器，社区驱动，Mozilla 支持。</li></ul><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a><a href="https://www.zhihu.com/search?q=%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2348782399%7D">函数式编程</a></h2><ul><li><a href="https://link.zhihu.com/?target=https://github.com/jashkenas/underscore">underscore</a>：JavaScript 的实用工具。</li><li><a href="https://link.zhihu.com/?target=https://github.com/lodash/lodash">lodash</a>：提供一致性、可定制、高性能和额外功能的实用库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/andrewplummer/Sugar">Sugar</a>：一个扩展了原生对象功能的 JavaScript 库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/dtao/lazy.js">lazy.js</a>：类似 <code>Underscore</code>，但性能更优越</li><li><a href="https://link.zhihu.com/?target=https://github.com/CrossEye/ramda">ramda</a>：一个针对 JavaScript 程序员的实用函数库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/mout/mout">mout</a>：模块化的 JavaScript 工具库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/crcn/mesh.js">mesh</a>：流数据同步工具。</li><li><a href="https://link.zhihu.com/?target=https://github.com/alanrsoares/prelude-js">preludejs</a>：JavaScript 硬核函数式编程。</li><li><a href="https://link.zhihu.com/?target=https://github.com/selfrefactor/rambda">rambda</a>：<em>Ramda</em> 快速小巧的替代品。</li></ul><h2 id="响应式编程"><a href="#响应式编程" class="headerlink" title="响应式编程"></a>响应式编程</h2><ul><li><a href="https://link.zhihu.com/?target=https://github.com/Reactive-Extensions/RxJS">RxJs</a>：对 JavaScript 进行响应式扩展。</li><li><a href="https://link.zhihu.com/?target=https://github.com/baconjs/bacon.js">Bacon</a>：JavaScript 的 FPR（函数式响应式编程）库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/pozadi/kefir">Kefir</a>：受 Bacon.js 和 RxJS 启发的 FRP 库，专注于高性能和低内存消耗。</li><li><a href="https://link.zhihu.com/?target=http://highlandjs.org/">Highland</a>：对 JavaScript 实用工具的重新思考，Highland 能轻易地管理同步和异步信息，而且仅使用标准 JavaScript 和类 Node 流。</li><li><a href="https://link.zhihu.com/?target=https://github.com/cujojs/most">Most.js</a>：高性能 FRP 库。</li><li><a href="https://zhuanlan.zhihu.com/Cycle.js">Cycle.js</a>：一款用于可预测代码的函数式和响应式 JavaScript 框架。</li><li><a href="https://link.zhihu.com/?target=https://github.com/concentjs/concent">concent</a>：绝对是 ❤️ 最简单却 ⚡️ 最强大的 react 状态管理开发框架，可预测、渐进式、高性能。</li></ul><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p><em>数据结构库用于构建一个更复杂的应用。</em></p><ul><li><a href="https://link.zhihu.com/?target=https://github.com/facebook/immutable-js">immutable-js</a>：不可变的数据集合，包括 Sequence、Range、Repeat、Map、OrderedMap、Set 和 sparse Vector。</li><li><a href="https://link.zhihu.com/?target=https://github.com/swannodette/mori">mori</a>：使用 ClojureScript 持久化数据结构和支持原生 JavaScript API 的库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/mauriciosantos/Buckets-JS">buckets</a>：完整的、经过充分测试和文档完备的数据结构的 JavaScript 库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/flesler/hashmap">hashmap</a>：简单的哈希映射实现，支持任何类型的键值。</li></ul><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><p><em>日期库。</em></p><ul><li><a href="https://link.zhihu.com/?target=https://github.com/moment/moment">moment</a>：解析、验证、操作和显示日期。</li><li><a href="https://link.zhihu.com/?target=https://github.com/moment/moment-timezone">moment-timezone</a>：基于 moment.js 的时区库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/rmm5t/jquery-timeago">jquery-timeago</a>：一款支持自动更新模糊时间戳的 jQuery 插件（如：”4 分钟之前”）。</li><li><a href="https://link.zhihu.com/?target=https://github.com/mde/timezone-js">timezone-js</a>：让 JavaScript Date 对象拥有时区功能。使用 Olson zoneinfo 文件记录时区数据。</li><li><a href="https://link.zhihu.com/?target=https://github.com/MatthewMueller/date">date</a>：对人类友好的 Date()。</li><li><a href="https://link.zhihu.com/?target=https://github.com/rauchg/ms.js">ms.js</a>：小巧的毫秒转换工具。</li><li><a href="https://link.zhihu.com/?target=https://github.com/gumroad/countdown.js">countdown.js</a>：超小倒计时。</li><li>[timeago.js](<a href="https://zhuanlan.zhihu.com/&#39;3">https://zhuanlan.zhihu.com/&#39;3</a> hours ago’. No dependency.)：一个非常轻量级（~1.7 Kb）的用于将时间转化成 <code>xxx时间前</code> 格式的库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/taylorhakes/fecha">fecha</a>：轻量级日期格式化和解析库（约 2kb）。可以用来替换 moment.js 格式化和解析日期功能（moment.js 体积比较大——译者注）。</li><li><a href="https://link.zhihu.com/?target=https://github.com/date-fns/date-fns">date-fns</a>：现代 JavaScript 日期功能库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/dawidjaniga/map-countdown">map-countdown</a>：构建在 Google 地图上的浏览器倒计时。</li><li><a href="https://link.zhihu.com/?target=https://github.com/iamkun/dayjs">dayjs</a>：Day.js 是一款拥有和 Moment.js 一样的现代化接口的日期库，但它仅仅有 2kb 大小，可以用来替换 Moment.js。</li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li><a href="https://link.zhihu.com/?target=https://github.com/panzerdp/voca">voca</a>：一款超级好用的 JavaScript 字符串库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/EvandroLG/selecting">selecting</a>：一个允许你获取用户选定文本的库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/epeli/underscore.string">underscore.string</a>：Underscore.js 的字符串操作扩展。</li><li><a href="https://link.zhihu.com/?target=https://github.com/jprichardson/string.js">string.js</a>：额外的 JavaScript 字符串方法。</li><li><a href="https://link.zhihu.com/?target=https://github.com/mathiasbynens/he">he</a>：健壮的 HTML 实体编码&#x2F;解码器。</li><li><a href="https://link.zhihu.com/?target=https://github.com/sindresorhus/multiline">multiline</a>：多行字符串。</li><li><a href="https://link.zhihu.com/?target=https://github.com/sindresorhus/query-string">query-string</a>：解析和字符串化 URL 查询字符串。</li><li><a href="https://link.zhihu.com/?target=https://github.com/medialize/URI.js/">URI.js</a>：URL 操作库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/Mikhus/jsurl">jsurl</a>：轻量的 URL 操作库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/alexei/sprintf.js">sprintf.js</a>：实现字符串格式化。</li><li><a href="https://link.zhihu.com/?target=https://github.com/snd/url-pattern">url-pattern</a>：比<a href="https://www.zhihu.com/search?q=%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2348782399%7D">正则表达式</a>匹配 url 或其它字符串更简单，字符串和数据可相互转化。</li><li><a href="https://link.zhihu.com/?target=https://github.com/plexis-js/plexis">plexis</a>：低保真、强大、社区驱动的字符串操作库。</li></ul><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><ul><li><a href="https://link.zhihu.com/?target=https://github.com/adamwdraper/Numeral-js">Numeral-js</a>：对数字进行格式化和操作的库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/chancejs/chancejs">chance.js</a>：JavaScript 随机生成器，可以生成数字、字符串等。</li><li><a href="https://link.zhihu.com/?target=https://github.com/HubSpot/odometer">odometer</a>：流畅的数字过渡效果。</li><li><a href="https://link.zhihu.com/?target=https://github.com/josscrowcroft/accounting.js">accounting.js</a>：对数字、金钱、货币进行格式化的轻量库，完全本地化和无依赖。</li><li><a href="https://link.zhihu.com/?target=https://github.com/josscrowcroft/money.js">money.js</a>：一个小巧（1kb）的货币转换库，适用于 web 和 nodeJS。</li><li><a href="https://link.zhihu.com/?target=https://github.com/infusion/Fraction.js">Fraction.js</a>：一个有理数库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/infusion/Complex.js">Complex.js</a>：一个复数库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/infusion/Polynomial.js">Polynomial.js</a>：一个多项式库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/infusion/Quaternion.js">Quaternion.js</a>：一款适用于 JavaScript 的四元数操作库。</li></ul><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><ul><li><a href="https://link.zhihu.com/?target=https://github.com/marcuswestin/store.js">store.js</a>：为所有浏览器封装了 LocalStorage，而没有使用 cookies 和 flash。隐秘地使用 localStorage、globalStorage 和用户数据。</li><li><a href="https://link.zhihu.com/?target=https://github.com/mozilla/localForage">localForage</a>：改善后的离线存储。其封装了 IndexedDB、WebSQL 和 localStorage，拥有操作简单和强大的 API。</li><li><a href="https://link.zhihu.com/?target=https://github.com/andris9/jStorage">jStorage</a>：jStorage 是一个简单的键值对数据库，用于在浏览器端存储数据。</li><li><a href="https://link.zhihu.com/?target=https://github.com/zendesk/cross-storage">cross-storage</a>：获得权限后，能跨域名本地存储。</li><li><a href="https://link.zhihu.com/?target=https://github.com/addyosmani/basket.js">basket.js</a>：用 localStorage 加载和缓存脚本的资源加载器。</li><li><a href="https://link.zhihu.com/?target=https://github.com/nodeca/bag.js">bag.js</a>：可以缓存脚本和加载资源，与 basket.js 相似，但增加了键值对接口和对 localStorage &#x2F; websql &#x2F; indexedDB 的支持。</li><li><a href="https://link.zhihu.com/?target=https://github.com/Wisembly/basil.js">basil.js</a>：智能的 JavaScript 数据持久层库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/carhartl/jquery-cookie">jquery-cookie</a>：轻量简单的、用于读取、编辑和删除 cookie 的 jQuery 插件。</li><li><a href="https://link.zhihu.com/?target=https://github.com/js-cookie/js-cookie">js-cookie</a>：一款简单、轻量的 cookies 读写删 jQuery 插件。</li><li><a href="https://link.zhihu.com/?target=https://github.com/ScottHamper/Cookies">Cookies</a>：一个客户端 Cookie 操作库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/aaronpowell/db.js/">DB.js</a>：基于 Promise 的、封装了 IndexedDB 的库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/brianleroux/lawnchair/">lawnchair.js</a>：简单的客户端 JSON 存储。</li><li><a href="https://link.zhihu.com/?target=https://github.com/kripken/sql.js">sql.js</a>：基于 Emscripten 将 SQLite 编译成 JavaScript。</li><li><a href="https://link.zhihu.com/?target=https://github.com/nirtz89/crumbsjs">crumbsjs</a>：一款轻量级原生 ES6 cookies 和本地存储 JavaScript 库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/softvar/awesome-web-storage">awesome-web-storage</a>：你必须知道的所有客户端存储知识。</li></ul><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><ul><li><a href="https://link.zhihu.com/?target=https://github.com/davidmerfield/randomColor">randomColor</a>：JavaScript 颜色生成器。</li><li><a href="https://link.zhihu.com/?target=https://github.com/gka/chroma.js">chroma.js</a>：拥有各种各样颜色操作的 JavaScript 库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/MoOx/color">color</a>：JavaScript 颜色转换和操作库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/mrmrs/colors">colors</a>：更智能的默认 web 颜色。</li><li><a href="https://link.zhihu.com/?target=https://github.com/Fooidge/PleaseJS">PleaseJS</a>：随机创建出赏心悦目的颜色和配色方案的 JavaScript 库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/bgrins/TinyColor">TinyColor</a>：快速、轻巧的颜色操作和转换库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/jariz/vibrant.js/">Vibrant.js</a>：从图像提取主要颜色。</li></ul><h2 id="国际化和本地化"><a href="#国际化和本地化" class="headerlink" title="国际化和本地化"></a>国际化和本地化</h2><ul><li><a href="https://link.zhihu.com/?target=https://github.com/i18next/i18next">i18next</a>：用 JavaScript 实现国际化（i18n）简单的方法。</li><li><a href="https://link.zhihu.com/?target=https://github.com/airbnb/polyglot.js">polyglot</a>：小巧的国际化助手库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/nodeca/babelfish/">babelfish</a>：提供友好易懂 API 的 i18n 库，并且内置多种支持。</li><li><a href="https://link.zhihu.com/?target=https://github.com/ttag-org/ttag">ttag</a>：基于 ES6 标签模板和优秀的旧 GNU gettext ，新潮的 JavaScript 国际化、本地化库。</li></ul><h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><ul><li><a href="https://link.zhihu.com/?target=https://github.com/caolan/async">async</a>：适用于 node.js 和浏览器的异步工具库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/kriskowal/q">q</a>：实现异步 promise 的 JavaScript 工具。</li><li><a href="https://link.zhihu.com/?target=https://github.com/creationix/step/">step</a>：一款可以使逻辑执行更简单的异步控制流库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/bevacqua/contra/">contra</a>：函数式风格实现的异步流控制。</li><li><a href="https://link.zhihu.com/?target=https://github.com/petkaantonov/bluebird/">Bluebird</a>：功能齐全的 promoise 库，专注于功能革新和性能提升。</li><li><a href="https://link.zhihu.com/?target=https://github.com/cujojs/when">when</a>：快速可靠的、Promises&#x2F;A+ 规范的 when() 实现，而且拥有其它<a href="https://www.zhihu.com/search?q=%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2348782399%7D">异步操作</a>的优秀特性。</li><li><a href="https://link.zhihu.com/?target=https://github.com/gartz/ObjectEventTarget">ObjectEventTarget</a>：为普通对象添加事件监听原型（就如浏览器 DOMElement 的 EventTarget 一样）。</li><li><a href="https://link.zhihu.com/?target=https://github.com/marcoonroad/sporadic">sporadic</a>：位于 promise 顶部的组合并发抽象（就像流、协程和类似 Go channels 一样），支持 Node.js 和浏览器引擎。</li></ul><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ul><li><a href="https://link.zhihu.com/?target=https://github.com/flatiron/director">director</a>：一个小巧的、与 URL 同构的路由。</li><li><a href="https://link.zhihu.com/?target=https://github.com/visionmedia/page.js">page.js</a>：受 Express router 启发的小型客户端路由器（约为1200字节）。</li><li><a href="https://link.zhihu.com/?target=https://github.com/mtrpcic/pathjs">pathjs</a>：简单、轻量的 web 路由。</li><li><a href="https://link.zhihu.com/?target=https://github.com/millermedeiros/crossroads.js">crossroads</a>：JavaScript 路由。</li><li><a href="https://link.zhihu.com/?target=https://github.com/olivernn/davis.js">davis.js</a>：基于 pushState 可降级 RESTful 风格的 JavaScript 路由。</li><li><a href="https://link.zhihu.com/?target=https://github.com/lukeed/navaid">navaid</a>：一款浏览器端的导航辅助系统（也可以成为路由），体积才 850 字节！</li></ul><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><ul><li><a href="https://link.zhihu.com/?target=https://github.com/cure53/DOMPurify">DOMPurify</a>：针对 HTML、MathML 和 SVG 的仅支持 DOM 的超快速、高容错的 XSS 过滤器。</li><li><a href="https://link.zhihu.com/?target=https://github.com/leizongmin/js-xss">js-xss</a>：通过白名单配置，即可过滤不信任的 HTML（防止 XSS 攻击）。</li><li><a href="https://link.zhihu.com/?target=https://github.com/yahoo/xss-filters">xss-filters</a>：Yahoo 出品的安全 XSS 过滤器。</li></ul><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><ul><li><a href="https://link.zhihu.com/?target=https://github.com/adamschwartz/log">log</a>：带样式的 Console.log。</li><li><a href="https://link.zhihu.com/?target=https://github.com/Oaxoa/Conzole">Conzole</a>：对 JavaScript 原生 console 对象方法和功能进行封装的 debug 面板，并将面板显示在页面内。</li><li><a href="https://link.zhihu.com/?target=https://github.com/patik/console.log-wrapper">console.log-wrapper</a>：将日志清晰地记录到 console，兼容所有浏览器。</li><li><a href="https://link.zhihu.com/?target=https://github.com/pimterry/loglevel">loglevel</a>：最轻量的 JavaScript 日志记录工具库，向封装后的 console.log 方法增加可靠的日志等级。</li><li><a href="https://link.zhihu.com/?target=http://mixu.net/minilog/">minilog</a>：轻量的、流式 API 显示的、可用于客户端和服务器端的日志记录库。</li><li>[storyboard](<a href="https://zhuanlan.zhihu.com/Storyboard">https://zhuanlan.zhihu.com/Storyboard</a> by guigrpa)：通用日志库 + Chrome 扩展。提供一个单一入口查看包含客户端和服务端的任务触发日志。</li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><ul><li>[RegEx101](regex101: build, test, and debug regex)：在线的 JavaScript 正则表达式测试器和调试器。同时也支持 Python、PHP 和 PCRE。</li><li>[RegExr](regexr: Learn, Build, &amp; Test RegEx)：用于创建、测试和学习正则表达式的 HTML&#x2F;JS 工具。</li></ul><h2 id="语音命令"><a href="#语音命令" class="headerlink" title="语音命令"></a>语音命令</h2><ul><li><a href="https://link.zhihu.com/?target=https://github.com/TalAter/annyang">annyang</a>：向网站添加语音命令的语音识别库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/pazguille/voix">voix.js</a>：向网站、app 或游戏添加语音命令的 JavaScript 库。</li></ul><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ul><li><a href="https://link.zhihu.com/?target=https://github.com/axios/axios">axios</a>：基于 Promise 的 HTTP 客户端，适用于 Node.js 和 浏览器。</li><li><a href="https://link.zhihu.com/?target=https://github.com/SGrondin/bottleneck">bottleneck</a>：强大的速度限制器，使调节流量变得更容易。</li><li><a href="https://link.zhihu.com/?target=https://github.com/bettiolo/oauth-signature-js">oauth-signature-js</a>：适用于 node 和 浏览器的 OAuth 1.0a 签名生成器。</li><li><a href="https://link.zhihu.com/?target=https://github.com/lincolnloop/amygdala">amygdala</a>：为 Web 应用提供 RESTful HTTP 客户端解决方案。</li><li><a href="https://link.zhihu.com/?target=https://github.com/jpillora/jquery.rest">jquery.rest</a>：一个让 RESTful API 更易用的 jQuery 插件。</li><li><a href="https://link.zhihu.com/?target=https://github.com/victor-am/rails-ranger">Rails Ranger</a>：为 Ruby Tails 接口设计的严格的 REST 客户端。</li><li><a href="https://link.zhihu.com/?target=https://github.com/elbywan/wretch">wretch</a>：一款小巧的直觉语法系 fetch 功能封装包。</li><li><a href="https://link.zhihu.com/?target=https://github.com/WebsiteBeaver/far-fetch">FarFetch</a>：简单易用的现代 Fetch 接口封装，简化了文件上传。</li><li><a href="https://link.zhihu.com/?target=https://github.com/opticdev/optic">Optic</a>：Optic 用于对 API 自动测试和文档生成。</li><li><a href="https://link.zhihu.com/?target=https://github.com/vercel/swr">SWR</a>：用于远端数据拉取的 React Hooks 库。</li></ul><h2 id="流媒体"><a href="#流媒体" class="headerlink" title="流媒体"></a>流媒体</h2><ul><li><a href="https://link.zhihu.com/?target=https://github.com/zalando/tailor">Tailor</a>：适用于前端微服务的流媒体布局服务，灵感来自 Facebook BigPipe。</li></ul><h2 id="视觉检测"><a href="#视觉检测" class="headerlink" title="视觉检测"></a>视觉检测</h2><ul><li><a href="https://link.zhihu.com/?target=https://github.com/eduardolundgren/tracking.js">tracking.js</a>：在 web 上实现计算视觉的一种现代方法。</li><li><a href="https://link.zhihu.com/?target=https://github.com/antimatter15/ocrad.js">ocrad.js</a>：基于 Emscripten 的 JavaScript OCR 实现。</li></ul><h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><ul><li><a href="https://link.zhihu.com/?target=https://github.com/karpathy/convnetjs">ConvNetJS</a>：JavaScript 深度学习。在浏览器环境训练<a href="https://www.zhihu.com/search?q=%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2348782399%7D">卷积神经网络</a>（或者普通神经网络）。</li><li><a href="https://link.zhihu.com/?target=https://github.com/dn2a/dn2a-javascript">DN2A</a>：数字神经网络架构。</li><li><a href="https://link.zhihu.com/?target=https://github.com/harthur/brain">Brain.js</a>：JavaScript 神经网络。</li><li><a href="https://link.zhihu.com/?target=https://github.com/stevenmiller888/mind">Mind.js</a>：一款灵活的神经网络库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/cazala/synaptic">Synaptic.js</a>：适用于 Node.js 和浏览器的无架构神经网络库。</li><li><a href="https://link.zhihu.com/?target=https://js.tensorflow.org/">TensorFlow.js</a>：一款用于在 浏览器和 Node.js 中训练和部署 ML 模型的 JavaScript 库。</li><li>[ml5.js](<a href="https://zhuanlan.zhihu.com/ml5js%C2%B7Friendly">https://zhuanlan.zhihu.com/ml5js·Friendly</a> Machine Learning For The Web)：友好的 Web 端机器学习库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/mrdimosthenis/Synapses">Synapses</a>：轻量级跨平台神经网络库。</li></ul><h2 id="浏览器检测"><a href="#浏览器检测" class="headerlink" title="浏览器检测"></a>浏览器检测</h2><ul><li><a href="https://link.zhihu.com/?target=https://github.com/ded/bowser">bowser</a>：一个浏览器检测器，特点是小巧快速且 API 丰富。</li></ul><h2 id="基准测试"><a href="#基准测试" class="headerlink" title="基准测试"></a>基准测试</h2><ul><li><a href="https://link.zhihu.com/?target=https://github.com/bestiejs/benchmark.js">benchmark.js</a>：jsPerf.com 使用的基准测试库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/logicalparadox/matcha">matcha</a>：一款咖啡因驱动的基准测试简单实现。</li></ul><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><ul><li><a href="https://link.zhihu.com/?target=https://github.com/julianshapiro/velocity">velocity</a>：加速 JavaScript 动画。</li><li><a href="https://link.zhihu.com/?target=https://github.com/rstacruz/jquery.transit">jquery.transit</a>：拥有超级流畅的 CSS3 变换和过渡效果的 jQuery 插件。</li><li><a href="https://link.zhihu.com/?target=https://github.com/impress/impress.js">impess.js</a>：在 HTML 文档里，运用 CSS3 变换和过渡制作类似 Prezi 的展现效果。</li><li><a href="https://link.zhihu.com/?target=https://github.com/tictail/bounce.js">bounce.js</a>：可以立刻创建有趣的 CSS3 动画。</li><li><a href="https://link.zhihu.com/?target=https://github.com/greensock/GreenSock-JS">GreenSock-JS</a>：适用于所有主流浏览器的高性能 HTML5 动画。</li><li><a href="https://link.zhihu.com/?target=https://github.com/EvandroLG/transitionEnd">TransitionEnd</a>：TransitionEnd 是一个运用 transitonend 事件的、跨浏览器的库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/michaelvillar/dynamics.js">Dynamics.js</a>：用于创建符合物理运动规律的 CSS 动画库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/pstadler/the-cube">the-cube</a>：The Cube 是一个 CSS3 过渡效果实验。</li><li><a href="https://link.zhihu.com/?target=https://github.com/h5bp/Effeckt.css">Effeckt.css</a>：一款高性能过渡动画库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/daneden/animate.css">animate.css</a>：要多易用有多易用的跨浏览器 CSS 动画库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/jschr/textillate">textillate</a>：适用于 CSS3 文本动画的简单插件。</li><li><a href="https://link.zhihu.com/?target=https://github.com/visionmedia/move.js">move.js</a>：基于 CSS3 的 JavaScript 动画框架。</li><li><a href="https://link.zhihu.com/?target=https://github.com/LeaVerou/animatable">animatable</a>：一个属性，两个值，无穷个可能性。</li><li><a href="https://link.zhihu.com/?target=https://github.com/peachananr/shuffle-images">shuffle-images</a>：简单有创意地打乱图片。[Just a moment…](<a href="https://zhuanlan.zhihu.com/Just">https://zhuanlan.zhihu.com/Just</a> a moment…)</li><li><a href="https://link.zhihu.com/?target=https://github.com/miguel-perez/smoothState.js">smoothState.js</a>：免打扰式页面过渡 jQuery 库。<a href="https://link.zhihu.com/?target=http://smoothstate.com/">http://smoothstate.com/</a></li><li><a href="https://link.zhihu.com/?target=http://animejs.com/">Anime.js</a>：一款 JavaScript 动画引擎。<a href="https://zhuanlan.zhihu.com/anime.js">anime.js</a></li><li><a href="https://link.zhihu.com/?target=https://github.com/VincentGarreau/particles.js">particles.js</a>：用于创建粒子的轻量 JavaScript 库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/matteobruni/tsparticles">tsParticles</a>：particles.js 全新升级版本，修复了 bug ，增加许多新功能。</li><li><a href="https://link.zhihu.com/?target=https://github.com/lindelof/particles-bg">particles-bg</a>：一款轻量的粒子运动动画背景 React 组件。</li></ul><h2 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h2><ul><li><a href="https://link.zhihu.com/?target=https://github.com/davidsonfellipe/lena.js">lena.js</a>：具有滤镜和实用功能的图像处理库。</li><li><a href="https://link.zhihu.com/?target=https://github.com/nodeca/pica">pica</a>：高质量地调整图片大小（使用快速、纯 JS 实现的 Lanczos 滤镜算法）。</li><li><a href="https://link.zhihu.com/?target=https://github.com/fengyuanchen/cropper">cropper</a>：一个简单的图像裁剪 jQuery 插件。</li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/11/22/hello-world/"/>
      <url>/2022/11/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
